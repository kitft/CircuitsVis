{
  "version": 3,
  "sources": ["../../src/index.ts", "../../src/activations/TextNeuronActivations.tsx", "../../src/shared/SampleItems.tsx", "../../src/tokens/ColoredTokens.tsx", "../../src/tokens/utils/Token.tsx", "../../src/utils/getTokenBackgroundColor.ts", "../../src/shared/RangeSelector.tsx", "../../src/shared/NumberSelector.tsx", "../../src/utils/arrayOps.ts", "../../src/attention/AttentionHeads.tsx", "../../src/attention/AttentionPattern.tsx", "../../src/attention/components/useHoverLock.tsx", "../../src/attention/AttentionPatterns.tsx", "../../src/attention/components/AttentionImage.tsx", "../../src/attention/components/AttentionTokens.tsx", "../../src/components/SaeVis.tsx", "../../src/examples/Hello.tsx", "../../src/logits/TokenLogProbs.tsx", "../../src/tokens/utils/TokenCustomTooltip.tsx", "../../src/render-helper.ts", "../../src/tokens/ColoredTokensMulti.tsx", "../../src/tokens/ColoredTokensCustomTooltips.tsx", "../../src/topk/TopkSamples.tsx", "../../src/topk/TopkTokens.tsx"],
  "sourcesContent": ["export { TextNeuronActivations } from \"./activations/TextNeuronActivations\";\nexport { AttentionHeads } from \"./attention/AttentionHeads\";\nexport { AttentionPattern } from \"./attention/AttentionPattern\";\nexport { AttentionPatterns } from \"./attention/AttentionPatterns\";\nexport { SaeVis } from \"./components/SaeVis\";\nexport { Hello } from \"./examples/Hello\";\nexport { TokenLogProbs } from \"./logits/TokenLogProbs\";\nexport { render } from \"./render-helper\";\nexport { ColoredTokens } from \"./tokens/ColoredTokens\";\nexport { ColoredTokensMulti } from \"./tokens/ColoredTokensMulti\";\nexport { TopkSamples } from \"./topk/TopkSamples\";\nexport { TopkTokens } from \"./topk/TopkTokens\";\n\n", "import { Rank, tensor, Tensor1D, Tensor3D } from \"@tensorflow/tfjs\";\nimport React, { useState, useEffect } from \"react\";\nimport { Container, Row, Col } from \"react-grid-system\";\nimport { SampleItems } from \"../shared/SampleItems\";\nimport { RangeSelector } from \"../shared/RangeSelector\";\nimport { NumberSelector } from \"../shared/NumberSelector\";\nimport { minMaxInNestedArray } from \"../utils/arrayOps\";\n\n/**\n * Get the selected activations\n *\n * @param activations All activations [ tokens x layers x neurons ]\n * @param layerNumber\n * @param neuronNumber\n */\nexport function getSelectedActivations(\n  activations: Tensor3D,\n  layerNumber: number,\n  neuronNumber: number\n): number[] {\n  const relevantActivations = activations\n    .slice([0, layerNumber, neuronNumber], [-1, 1, 1])\n    .squeeze<Tensor1D>([1, 2]);\n  return relevantActivations.arraySync();\n}\n\n/**\n * Show activations (colored by intensity) for each token.\n *\n * Includes drop-downs for e.g. showing the activations for the selected layer\n * and neuron for the given samples.\n */\nexport function TextNeuronActivations({\n  tokens,\n  activations,\n  firstDimensionName = \"Layer\",\n  secondDimensionName = \"Neuron\",\n  firstDimensionLabels,\n  secondDimensionLabels\n}: TextNeuronActivationsProps) {\n  // If there is only one sample (i.e. if tokens is an array of strings), cast tokens and activations to an array with\n  // a single element\n  const tokensList: string[][] =\n    typeof tokens[0] === \"string\"\n      ? ([tokens] as string[][])\n      : (tokens as string[][]);\n  const activationsList: number[][][][] =\n    typeof activations[0][0][0] === \"number\"\n      ? ([activations] as number[][][][])\n      : (activations as number[][][][]);\n\n  // Obtain min and max activations for a consistent color scale across all samples\n  const [minValue, maxValue] = minMaxInNestedArray(activationsList);\n\n  // Convert the activations to a tensor\n  const activationsTensors = activationsList.map((sampleActivations) => {\n    return tensor<Rank.R3>(sampleActivations);\n  });\n\n  // Get number of layers/neurons\n  const numberOfLayers = activationsTensors[0].shape[1];\n  const numberOfNeurons = activationsTensors[0].shape[2];\n  const numberOfSamples = activationsTensors.length;\n\n  const [samplesPerPage, setSamplesPerPage] = useState<number>(\n    Math.min(5, numberOfSamples)\n  );\n  const [sampleNumbers, setSampleNumbers] = useState<number[]>([\n    ...Array(samplesPerPage).keys()\n  ]);\n  const [layerNumber, setLayerNumber] = useState<number>(0);\n  const [neuronNumber, setNeuronNumber] = useState<number>(0);\n\n  useEffect(() => {\n    // When the user changes the samplesPerPage, update the sampleNumbers\n    setSampleNumbers([...Array(samplesPerPage).keys()]);\n  }, [samplesPerPage]);\n\n  // Get the relevant activations for the selected samples, layer, and neuron.\n  const selectedActivations: number[][] = sampleNumbers.map((sampleNumber) => {\n    return getSelectedActivations(\n      activationsTensors[sampleNumber],\n      layerNumber,\n      neuronNumber\n    );\n  });\n\n  const selectedTokens: string[][] = sampleNumbers.map((sampleNumber) => {\n    return tokensList[sampleNumber];\n  });\n\n  const selectRowStyle = {\n    paddingTop: 5,\n    paddingBottom: 5\n  };\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col>\n          <Row style={selectRowStyle}>\n            <Col>\n              <label htmlFor=\"layer-selector\" style={{ marginRight: 15 }}>\n                {firstDimensionName}:\n              </label>\n              <NumberSelector\n                id=\"layer-selector\"\n                largestNumber={numberOfLayers! - 1}\n                currentValue={layerNumber}\n                setCurrentValue={setLayerNumber}\n                labels={firstDimensionLabels}\n              />\n            </Col>\n          </Row>\n          <Row style={selectRowStyle}>\n            <Col>\n              <label htmlFor=\"neuron-selector\" style={{ marginRight: 15 }}>\n                {secondDimensionName}:\n              </label>\n              <NumberSelector\n                id=\"neuron-selector\"\n                largestNumber={numberOfNeurons! - 1}\n                currentValue={neuronNumber}\n                setCurrentValue={setNeuronNumber}\n                labels={secondDimensionLabels}\n              />\n            </Col>\n          </Row>\n          {/* Only show the sample selector if there is more than one sample */}\n          {numberOfSamples > 1 && (\n            <Row style={selectRowStyle}>\n              <Col>\n                <label htmlFor=\"sample-selector\" style={{ marginRight: 15 }}>\n                  Samples:\n                </label>\n                <RangeSelector\n                  id=\"sample-selector\"\n                  largestNumber={numberOfSamples - 1}\n                  currentRangeArr={sampleNumbers}\n                  setCurrentValue={setSampleNumbers}\n                  numValsInRange={samplesPerPage}\n                />\n              </Col>\n            </Row>\n          )}\n        </Col>\n        <Col>\n          {/* Only show the sample per page selector if there is more than one sample */}\n          {numberOfSamples > 1 && (\n            <Row style={selectRowStyle}>\n              <Col>\n                <label\n                  htmlFor=\"samples-per-page-selector\"\n                  style={{ marginRight: 15 }}\n                >\n                  Samples per page:\n                </label>\n                <NumberSelector\n                  id=\"samples-per-page-selector\"\n                  smallestNumber={1}\n                  largestNumber={numberOfSamples}\n                  currentValue={samplesPerPage}\n                  setCurrentValue={setSamplesPerPage}\n                />\n              </Col>\n            </Row>\n          )}\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <SampleItems\n            activationsList={selectedActivations}\n            tokensList={selectedTokens}\n            minValue={minValue}\n            maxValue={maxValue}\n          />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport interface TextNeuronActivationsProps {\n  /**\n   * List of lists of tokens (if multiple samples) or a list of tokens (if\n   * single sample)\n   *\n   * If multiple samples, each list must be the same length as the number of activations in the\n   * corresponding activations list.\n   */\n  tokens: string[][] | string[];\n\n  /**\n   * Activations\n   *\n   * If multiple samples, will be a nested list of numbers, of the form [ sample x tokens x layers x neurons\n   * ]. If a single sample, will be a list of numbers of the form [ tokens x layers x neurons ].\n   */\n  activations: number[][][][] | number[][][];\n\n  /**\n   * Name of the first dimension\n   */\n  firstDimensionName?: string;\n\n  /**\n   * Name of the second dimension\n   */\n  secondDimensionName?: string;\n\n  /**\n   * Labels for the first dimension\n   */\n  firstDimensionLabels?: string[];\n\n  /**\n   * Labels for the second dimension\n   */\n  secondDimensionLabels?: string[];\n}\n", "import React from \"react\";\nimport { Row, Col } from \"react-grid-system\";\nimport { ColoredTokens } from \"../tokens/ColoredTokens\";\n\n/**\n * Show the lists of tokens, colored by their activation value.\n * Each sample is displayed in a separate box, unless there is only one sample.\n *\n * @returns A div element\n */\nexport function SampleItems({\n  activationsList,\n  tokensList,\n  minValue,\n  maxValue\n}: {\n  activationsList: number[][] | null;\n  tokensList: string[][] | null;\n  minValue?: number;\n  maxValue?: number;\n}) {\n  // Styling for the background of the samples\n  const boxedSampleStyle = {\n    border: \"1px solid black\",\n    borderRadius: 5,\n    padding: 10,\n    marginTop: 10,\n    marginBottom: 10,\n    backgroundColor: \"#f5f5f5\"\n  };\n  // For each set of activations in activationsList, show the\n  // corresponding ColoredTokens objects in separate raised boxes\n  // If there is only a single set of activations don't show the box.\n  return (\n    <div>\n      {activationsList &&\n        tokensList &&\n        activationsList.length > 1 &&\n        activationsList.map((activations, index) => (\n          <Row key={index}>\n            <Col style={boxedSampleStyle}>\n              <ColoredTokens\n                minValue={minValue}\n                maxValue={maxValue}\n                tokens={tokensList[index]}\n                values={activations}\n                paddingBottom={0}\n              />\n            </Col>\n          </Row>\n        ))}\n      {activationsList && tokensList && activationsList.length === 1 && (\n        <Row key={0}>\n          <Col>\n            <ColoredTokens tokens={tokensList[0]} values={activationsList[0]} />\n          </Col>\n        </Row>\n      )}\n    </div>\n  );\n}\n", "import { AnyColor } from \"colord\";\nimport React from \"react\";\nimport { Token } from \"./utils/Token\";\n\n/**\n * Display tokens with a background representing how negative (close to\n * `negativeColor`) or positive (close to `positiveColor`) the token is. Zero is\n * always displayed as white.\n *\n * Hover over a token, to view its value.\n */\nexport function ColoredTokens({\n  maxValue,\n  minValue,\n  negativeColor,\n  positiveColor,\n  tokens,\n  values,\n  paddingBottom\n}: ColoredTokensProps) {\n  const tokenMin = minValue ?? Math.min(...values);\n  const tokenMax = maxValue ?? Math.max(...values);\n\n  return (\n    <div className=\"colored-tokens\" style={{ paddingBottom }}>\n      {tokens.map((token, key) => (\n        <Token\n          key={key}\n          token={token}\n          value={values[key]}\n          min={tokenMin}\n          max={tokenMax}\n          negativeColor={negativeColor}\n          positiveColor={positiveColor}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport interface ColoredTokensProps {\n  /**\n   * Maximum value\n   *\n   * Used to determine how dark the token color is when positive (i.e. based on\n   * how close it is to the minimum value).\n   *\n   * @default Math.max(...values)\n   */\n  maxValue?: number;\n\n  /**\n   * Minimum value\n   *\n   * Used to determine how dark the token color is when negative (i.e. based on\n   * how close it is to the minimum value).\n   *\n   * @default Math.min(...values)\n   */\n  minValue?: number;\n\n  /**\n   * Negative color\n   *\n   * Color to use for negative values. This can be any valid CSS color string.\n   *\n   * Be mindful of color blindness if not using the default here.\n   *\n   * @default \"red\"\n   *\n   * @example rgb(255, 0, 0)\n   *\n   * @example #ff0000\n   */\n  negativeColor?: AnyColor;\n\n  /**\n   * Positive color\n   *\n   * Color to use for positive values. This can be any valid CSS color string.\n   *\n   * Be mindful of color blindness if not using the default here.\n   *\n   * @default \"blue\"\n   *\n   * @example rgb(0, 0, 255)\n   *\n   * @example #0000ff\n   */\n  positiveColor?: AnyColor;\n\n  /**\n   * The padding below the sample\n   *\n   * @default 30\n   */\n  paddingBottom?: number;\n\n  /**\n   * List of tokens\n   *\n   * Must be the same length as the list of values.\n   */\n  tokens: string[];\n\n  /**\n   * Values for each token\n   *\n   * Must be the same length as the list of tokens.\n   */\n  values: number[];\n}\n", "import React from \"react\";\nimport { colord, AnyColor } from \"colord\";\nimport { usePopperTooltip } from \"react-popper-tooltip\";\nimport { getTokenBackgroundColor } from \"../../utils/getTokenBackgroundColor\";\n\nexport function formatTokenText(token: string) {\n  // Handle special tokens (e.g. spaces/line breaks)\n  const tokenReplaceSpaces = token.replace(/\\s/g, \"&nbsp;\");\n  const tokenReplaceLineBreaks = tokenReplaceSpaces.replace(/\\n/g, \"\u00B6\");\n  return tokenReplaceLineBreaks;\n}\n\n/**\n * Token (shown as an inline block)\n */\nexport function Token({\n  token,\n  value,\n  min,\n  max,\n  negativeColor,\n  positiveColor\n}: {\n  token: string;\n  value: number;\n  min: number;\n  max: number;\n  negativeColor?: AnyColor;\n  positiveColor?: AnyColor;\n}) {\n  // Hover state\n  const { getTooltipProps, setTooltipRef, setTriggerRef, visible } =\n    usePopperTooltip({\n      followCursor: true\n    });\n\n  // Get the background color\n  const backgroundColor = getTokenBackgroundColor(\n    value,\n    min,\n    max,\n    negativeColor,\n    positiveColor\n  ).toRgbString();\n\n  // Get the text color\n  const textColor =\n    colord(backgroundColor).brightness() < 0.6 ? \"white\" : \"black\";\n\n  // Format the span (CSS style)\n  const spanStyle: React.CSSProperties = {\n    display: \"inline-block\",\n    backgroundColor,\n    color: textColor,\n    lineHeight: \"1em\",\n    padding: \"3px 0\",\n    marginLeft: -1,\n    marginBottom: 1,\n    borderWidth: 1,\n    borderStyle: \"solid\",\n    borderColor: \"#eee\"\n  };\n\n  // Handle special tokens (e.g. spaces/line breaks)\n  const tokenReplaceLineBreaks = formatTokenText(token);\n  const lineBreakElements = token.match(/\\n/g)!;\n\n  return (\n    <>\n      <span ref={setTriggerRef}>\n        <span\n          style={spanStyle}\n          dangerouslySetInnerHTML={{ __html: tokenReplaceLineBreaks }}\n        ></span>\n        {lineBreakElements?.map((_break, idx) => (\n          <br key={idx} />\n        ))}\n      </span>\n\n      {visible && (\n        <div\n          ref={setTooltipRef}\n          {...getTooltipProps({\n            style: {\n              background: \"#333\",\n              color: \"white\",\n              textAlign: \"center\",\n              padding: 10,\n              borderRadius: 5,\n              boxShadow: \"5px 5px rgba(0, 0, 0, 0.03)\",\n              marginTop: 15,\n              zIndex: 1\n            }\n          })}\n        >\n          <strong>{token}</strong>\n          <br />\n          {value}\n        </div>\n      )}\n    </>\n  );\n}\n", "import { colord, extend, AnyColor, Colord } from \"colord\";\nimport mixPlugin from \"colord/plugins/mix\";\nimport namesPlugin from \"colord/plugins/names\";\n\nextend([mixPlugin, namesPlugin]);\n\n/**\n * Get the token background color\n *\n * Defaults to color blind friendly colors (https://davidmathlogic.com/colorblind/#%23D81B60-%231E88E5-%23FFC107-%23004D40)\n */\nexport function getTokenBackgroundColor(\n  value: number,\n  min: number,\n  max: number,\n  negativeColor: AnyColor = \"red\",\n  positiveColor: AnyColor = \"blue\"\n): Colord {\n  // original_color.mix(\"white\", x) interpolates between original_color and\n  // white, with x being the ratio of white. So x=0 is original_color, x=1 is\n  // white. Clamp at 0 to avoid negative values.\n  if (value >= 0) {\n    return colord(positiveColor).mix(\n      colord(\"white\"),\n      Math.min(Math.max(1 - value / max, 0), 1)\n    );\n  }\n\n  // value and min are assumed to be negative. We negate them to be consistent with the positive case.\n  return colord(negativeColor).mix(\n    colord(\"white\"),\n    Math.min(Math.max(1 - -value / -min, 0), 1)\n  );\n}\n", "import React from \"react\";\n\n/**\n * Function for converting an array of numbers to a string representing the\n * range.\n * @param {number[]} rangeArr - Array of numbers representing a range.\n * @returns {string} - String representing the range.\n */\nexport function rangeArrToString(rangeArr: number[]): string {\n  return rangeArr.length < 3\n    ? rangeArr.join(\"-\")\n    : `${rangeArr[0]}-${rangeArr[rangeArr.length - 1]}`;\n}\n\n/**\n * Function for converting a string representing of a range to an array of\n * numbers.\n * @param {string} rangeStr - String representing a range.\n * @returns {number[]} - Array of numbers representing the range.\n */\nexport function rangeStringToArr(rangeStr: string): number[] {\n  const rangeArr = rangeStr.split(\"-\");\n  if (rangeArr.length === 1) {\n    return [parseInt(rangeArr[0], 10)];\n  }\n  const start = parseInt(rangeArr[0], 10);\n  const end = parseInt(rangeArr[rangeArr.length - 1], 10);\n  return Array.from({ length: end - start + 1 }, (_, i) => start + i);\n}\n\n/**\n * Create an html select with each option being a string representation of a\n * range of numbers that takes the form \"start-end\", where start is the first\n * number in the range and end is the last number in the range. E.g. if\n * largestNumber=4, smallestNumber=0, and numValsInRange=2, then the ranges array\n * will be [\"0-1\", \"2-3\", \"4\"].\n *\n * @returns Select element.\n */\nexport function RangeSelector({\n  smallestNumber = 0,\n  largestNumber,\n  currentRangeArr,\n  setCurrentValue,\n  numValsInRange,\n  id\n}: {\n  /** Smallest number included in the range */\n  smallestNumber?: number;\n  /** Largest number included in the range */\n  largestNumber: number;\n  /** Current range selected represented as an array of numbers */\n  currentRangeArr: number[];\n  /** Function for setting the selected range */\n  setCurrentValue: (rangeArr: number[]) => void;\n  /** The max number of values in each range */\n  numValsInRange: number;\n  /** The id of the select */\n  id: string;\n}) {\n  // Convert the current range to a string.\n  const currentRange: string = rangeArrToString(currentRangeArr);\n\n  // Create an array of ranges to display in the select.\n  const ranges: string[] = [];\n  for (let i = smallestNumber; i <= largestNumber; i += numValsInRange) {\n    const start = i;\n    const end = Math.min(i + numValsInRange - 1, largestNumber);\n    if (start === end) {\n      ranges.push(`${start}`);\n    } else {\n      ranges.push(`${start}-${end}`);\n    }\n  }\n\n  return (\n    <select\n      value={currentRange}\n      onChange={(event) =>\n        setCurrentValue(rangeStringToArr(event.target.value))\n      }\n      id={id}\n    >\n      {ranges.map((range) => (\n        <option key={range}>{range}</option>\n      ))}\n    </select>\n  );\n}\n", "import React from \"react\";\n\n/**\n * Create an html select with each option corresponding to a single number in a\n * range of numbers.\n *\n * @returns Select element.\n */\nexport function NumberSelector({\n  smallestNumber = 0,\n  largestNumber,\n  currentValue,\n  setCurrentValue,\n  id,\n  labels\n}: {\n  /** Smallest number included in the range */\n  smallestNumber?: number;\n  /** Largest number included in the range */\n  largestNumber: number;\n  /** Current value selected */\n  currentValue: number;\n  /** Function for setting the selected value */\n  setCurrentValue: (num: number) => void;\n  /** The id of the select */\n  id: string;\n  /** Labels for each option */\n  labels?: string[];\n}) {\n  // Initialize an array of numbers smallestNumber-largestNumber\n  const options = [...Array(largestNumber - smallestNumber + 1).keys()].map(\n    (i) => i + smallestNumber\n  );\n  // If no labels are provided or the length of labels is not equal to the length of options, use the numbers as the labels.\n  const resolvedLabels =\n    labels && labels.length === options.length\n      ? labels\n      : options.map((i) => i.toString());\n  return (\n    <select\n      value={currentValue}\n      onChange={(event) => setCurrentValue(Number(event.target.value))}\n      id={id}\n    >\n      {/* If no labels are provided, use the numbers as the labels. */}\n      {options.map((value, index) => (\n        <option key={value} value={value}>\n          {resolvedLabels[index]}\n        </option>\n      ))}\n    </select>\n  );\n}\n", "/**\n * Slices a 2D array.\n *\n * @param arr - The 2D array to slice\n * @param dims - The dimensions to slice, as 2D array of pairs of start and end indices\n * @returns The sliced array\n */\nexport function arraySlice2D(\n  arr: number[][],\n  dims: [number, number][]\n): number[][] {\n  // Recursively apply the slicing operation on each dimension\n  return arr\n    .slice(dims[0][0], dims[0][1])\n    .map((row) => row.slice(dims[1][0], dims[1][1]));\n}\n\ntype NestedArrayOfNumbers = number[] | NestedArrayOfNumbers[];\n/**\n * Finds the minimum and maximum values in a nested array of arbitrary depth.\n *\n * @param {any[]} arr - The input array.\n * @returns {[number, number]} A tuple containing the minimum and maximum values in the array.\n *\n * @example\n * minMaxInNestedArray([1, 2, 3, [4, 5, [6, 7]], 8]);\n * // returns [1, 8]\n *\n * @example\n * minMaxInNestedArray([[[[1]]]], 2, 3, [[4]]);\n * // returns [1, 4]\n */\nexport function minMaxInNestedArray(\n  arr: NestedArrayOfNumbers\n): [number, number] {\n  if (arr.length === 0) {\n    return [0, 1];\n  }\n  let min = Number.MAX_VALUE;\n  let max = Number.MIN_VALUE;\n  for (let i = 0; i < arr.length; i += 1) {\n    if (Array.isArray(arr[i])) {\n      const [subMin, subMax] = minMaxInNestedArray(\n        arr[i] as NestedArrayOfNumbers\n      );\n      min = Math.min(min, subMin);\n      max = Math.max(max, subMax);\n    } else {\n      min = Math.min(min, arr[i] as number);\n      max = Math.max(max, arr[i] as number);\n    }\n  }\n  return [min, max];\n}\n", "import React from \"react\";\nimport { Col, Container, Row } from \"react-grid-system\";\nimport { AttentionPattern } from \"./AttentionPattern\";\nimport { useHoverLock, UseHoverLockState } from \"./components/useHoverLock\";\n\n/**\n * Attention head color\n *\n * @param idx Head index\n * @param numberOfHeads Number of heads\n * @param alpha Opaqueness (0% = fully transparent, 100% = fully opaque)\n */\nexport function attentionHeadColor(\n  idx: number,\n  numberOfHeads: number,\n  alpha: string = \"100%\"\n): string {\n  const hue = Math.round((idx / numberOfHeads) * 360);\n\n  return `hsla(${hue}, 70%, 50%,  ${alpha})`;\n}\n\n/**\n * Attention Heads Selector\n */\nexport function AttentionHeadsSelector({\n  attention,\n  attentionHeadNames,\n  focused,\n  maxValue,\n  minValue,\n  negativeColor,\n  onClick,\n  onMouseEnter,\n  onMouseLeave,\n  positiveColor,\n  maskUpperTri,\n  tokens\n}: AttentionHeadsProps & {\n  attentionHeadNames: string[];\n} & UseHoverLockState) {\n  return (\n    <Row style={{ marginBottom: 15 }}>\n      {attention.map((headAttention, idx) => {\n        const isFocused = focused === idx;\n\n        return (\n          <Col lg={1} md={2} xs={3} style={{ margin: 0, padding: 0 }} key={idx}>\n            <div\n              style={{ padding: 3 }}\n              onClick={() => onClick(idx)}\n              onMouseEnter={() => onMouseEnter(idx)}\n              onMouseLeave={onMouseLeave}\n            >\n              <div\n                style={{\n                  position: \"relative\",\n                  borderStyle: \"solid\",\n                  borderWidth: 1,\n                  borderColor: attentionHeadColor(idx, attention.length),\n                  boxShadow: isFocused\n                    ? `0px 0px 4px 3px ${attentionHeadColor(\n                        idx,\n                        attention.length,\n                        \"60%\"\n                      )}`\n                    : undefined\n                }}\n              >\n                <h4\n                  style={{\n                    position: \"absolute\",\n                    top: 0,\n                    right: 0,\n                    zIndex: 100,\n                    margin: 0,\n                    padding: 1,\n                    background: attentionHeadColor(idx, attention.length),\n                    color: \"white\"\n                  }}\n                >\n                  {attentionHeadNames[idx]}\n                </h4>\n\n                <AttentionPattern\n                  attention={headAttention}\n                  tokens={tokens}\n                  showAxisLabels={false}\n                  maxValue={maxValue}\n                  minValue={minValue}\n                  negativeColor={negativeColor}\n                  positiveColor={positiveColor}\n                  maskUpperTri={maskUpperTri}\n                />\n              </div>\n            </div>\n          </Col>\n        );\n      })}\n    </Row>\n  );\n}\n\n/**\n * Attention patterns from destination to source tokens, for a group of heads.\n *\n * Displays a small heatmap for each attention head. When one is selected, it is\n * then shown in full size.\n */\nexport function AttentionHeads({\n  attention,\n  attentionHeadNames,\n  maxValue,\n  minValue,\n  negativeColor,\n  positiveColor,\n  maskUpperTri = true,\n  tokens\n}: AttentionHeadsProps) {\n  // Attention head focussed state\n  const { focused, onClick, onMouseEnter, onMouseLeave } = useHoverLock(0);\n\n  const headNames =\n    attentionHeadNames || attention.map((_, idx) => `Head ${idx}`);\n\n  return (\n    <Container>\n      <h3 style={{ marginBottom: 15 }}>\n        Head Selector (hover to view, click to lock)\n      </h3>\n\n      <AttentionHeadsSelector\n        attention={attention}\n        attentionHeadNames={headNames}\n        focused={focused}\n        maxValue={maxValue}\n        minValue={minValue}\n        negativeColor={negativeColor}\n        onClick={onClick}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n        positiveColor={positiveColor}\n        maskUpperTri={maskUpperTri}\n        tokens={tokens}\n      />\n\n      <Row>\n        <Col xs={12}>\n          <h3 style={{ marginBottom: 10 }}>{headNames[focused]} Zoomed</h3>\n          <div>\n            <h2\n              style={{\n                position: \"absolute\",\n                top: 0,\n                right: 0,\n                zIndex: 1000,\n                margin: 6,\n                padding: \"5px 10px\",\n                background: attentionHeadColor(focused, attention.length),\n                color: \"white\"\n              }}\n            >\n              {headNames[focused]}\n            </h2>\n            <AttentionPattern\n              attention={attention[focused]}\n              maxValue={maxValue}\n              minValue={minValue}\n              negativeColor={negativeColor}\n              positiveColor={positiveColor}\n              zoomed={true}\n              maskUpperTri={maskUpperTri}\n              tokens={tokens}\n            />\n          </div>\n        </Col>\n      </Row>\n\n      <Row></Row>\n    </Container>\n  );\n}\n\nexport interface AttentionHeadsProps {\n  /**\n   * Attention heads activations\n   *\n   * Of the shape [ heads x dest_pos x src_pos ]\n   */\n  attention: number[][][];\n\n  /**\n   * Names for each attention head\n   *\n   * Useful if e.g. you want to label the heads with the layer they are from.\n   */\n  attentionHeadNames?: string[];\n\n  /**\n   * Maximum value\n   *\n   * Used to determine how dark the token color is when positive (i.e. based on\n   * how close it is to the maximum value).\n   *\n   * @default Math.max(...values)\n   */\n  maxValue?: number;\n\n  /**\n   * Minimum value\n   *\n   * Used to determine how dark the token color is when negative (i.e. based on\n   * how close it is to the minimum value).\n   *\n   * @default Math.min(...values)\n   */\n  minValue?: number;\n\n  /**\n   * Negative color\n   *\n   * Color to use for negative values. This can be any valid CSS color string.\n   *\n   * Be mindful of color blindness if not using the default here.\n   *\n   * @default red\n   *\n   * @example rgb(255, 0, 0)\n   *\n   * @example #ff0000\n   */\n  negativeColor?: string;\n\n  /**\n   * Positive color\n   *\n   * Color to use for positive values. This can be any valid CSS color string.\n   *\n   * Be mindful of color blindness if not using the default here.\n   *\n   * @default blue\n   *\n   * @example rgb(0, 0, 255)\n   *\n   * @example #0000ff\n   */\n  positiveColor?: string;\n\n  /**\n   * Mask upper triangular\n   *\n   * Whether or not to mask the upper triangular portion of the attention patterns.\n   *\n   * Should be true for causal attention, false for bidirectional attention.\n   *\n   * @default true\n   */\n  maskUpperTri?: boolean;\n\n  /**\n   * Show axis labels\n   */\n  showAxisLabels?: boolean;\n\n  /**\n   * List of tokens\n   *\n   * Must be the same length as the list of values.\n   */\n  tokens: string[];\n}\n", "import React, { useMemo } from \"react\";\nimport { MatrixController, MatrixElement } from \"chartjs-chart-matrix\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  Tooltip,\n  ScriptableContext,\n  TooltipItem,\n  ChartData,\n  LinearScale\n} from \"chart.js\";\nimport { Chart, ChartProps } from \"react-chartjs-2\";\nimport { Col, Row } from \"react-grid-system\";\nimport { colord } from \"colord\";\nimport { getTokenBackgroundColor } from \"../utils/getTokenBackgroundColor\";\n\n/**\n * Register ChartJS plugins\n */\nChartJS.register(\n  CategoryScale,\n  Tooltip,\n  MatrixElement,\n  MatrixController,\n  LinearScale\n);\n\n/**\n * Block data point\n *\n * Contains information about a single block on the chart.\n */\nexport interface Block {\n  /** Source token with index suffix */\n  x: string;\n  /** Destination token with index suffix */\n  y: string;\n  /** Attention value */\n  v: number;\n  /** Source token */\n  srcToken: string;\n  /** Destination token */\n  destToken: string;\n  /** Source index */\n  srcIdx: number;\n  /** Destination index */\n  destIdx: number;\n}\n\nconst DefaultUpperTriColor = \"rgb(200,200,200)\";\n\n/**\n * Attention pattern from destination to source tokens. Displays a heatmap of\n * attention values (hover to see the specific values).\n */\nexport function AttentionPattern({\n  attention,\n  maxValue = 1,\n  minValue = -1,\n  negativeColor,\n  positiveColor,\n  upperTriColor = DefaultUpperTriColor,\n  showAxisLabels = true,\n  zoomed = false,\n  maskUpperTri = true,\n  tokens\n}: AttentionPatternProps) {\n  // Tokens must be unique (for the categories), so we add an index prefix\n  const uniqueTokens = useMemo(\n    () => tokens.map((token, idx) => `${token.replace(/\\s/g, \"\")} (${idx})`),\n    [tokens]\n  );\n\n  // Memoize the chart data\n  const chartData = useMemo(() => {\n    return attention\n      .map((src, destIdx) =>\n        src.map((value, srcIdx) => ({\n          srcIdx,\n          destIdx,\n          srcToken: tokens[srcIdx],\n          destToken: tokens[destIdx],\n          x: uniqueTokens[srcIdx],\n          y: uniqueTokens[destIdx],\n          v: value\n        }))\n      )\n      .flat();\n  }, [attention, tokens, uniqueTokens]);\n\n  // Format the chart data\n  const data: ChartData<\"matrix\", Block[], unknown> = {\n    datasets: [\n      {\n        // Data must be given in the form {x: xCategory, y: yCategory, v: value}\n        data: chartData,\n        // Set the background color for each block, based on the attention value\n        backgroundColor(context: ScriptableContext<\"matrix\">) {\n          const block = context.dataset.data[context.dataIndex] as any as Block;\n          if (maskUpperTri && block.srcIdx > block.destIdx) {\n            // Color the upper triangular part separately\n            return colord(upperTriColor).toRgbString();\n          }\n          const color = getTokenBackgroundColor(\n            block.v,\n            minValue,\n            maxValue,\n            negativeColor,\n            positiveColor\n          );\n          return color.toRgbString();\n        },\n        // Block size\n        width: (ctx) => ctx.chart.chartArea.width / tokens.length,\n        height: (ctx) => ctx.chart.chartArea.height / tokens.length\n      }\n    ]\n  };\n\n  // Chart options\n  const options: ChartProps<\"matrix\", Block[], unknown>[\"options\"] = {\n    animation: {\n      duration: 0 // general animation time\n    },\n    plugins: {\n      // Tooltip (hover) options\n      tooltip: {\n        enabled: showAxisLabels,\n        yAlign: \"bottom\",\n        callbacks: {\n          title: () => \"\", // Hide the title\n          label({ raw }: TooltipItem<\"matrix\">) {\n            const block = raw as Block;\n            if (maskUpperTri && block.destIdx < block.srcIdx) {\n              // Just show N/A for the upper triangular part\n              return \"N/A\";\n            }\n            return [\n              `(${block.destIdx}, ${block.srcIdx})`,\n              `Src: ${block.srcToken}`,\n              `Dest: ${block.destToken} `,\n              `Val: ${block.v}`\n            ];\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        title: { display: true, text: \"Source Token\", padding: 1 },\n        type: \"category\" as any,\n        labels: uniqueTokens,\n        offset: true,\n        ticks: { display: true, minRotation: 45, maxRotation: 90 },\n        grid: { display: false },\n        display: showAxisLabels\n      },\n      y: {\n        title: { display: true, text: \"Destination Token\", padding: 1 },\n        type: \"category\" as any,\n        offset: true,\n        labels: [...uniqueTokens].reverse(),\n        ticks: { display: true },\n        grid: { display: false },\n        display: showAxisLabels\n      }\n    }\n  };\n\n  return (\n    <Col>\n      <Row>\n        <div\n          style={{\n            // Chart.js charts resizing is weird.\n            // Responsive chart elements (which all are by default) require the\n            // parent element to have position: 'relative' and no sibling elements.\n            // There were previously issues that only occured at particular display\n            // sizes and zoom levels. See:\n            // https://github.com/TransformerLensOrg/CircuitsVis/pull/63\n            // https://www.chartjs.org/docs/latest/configuration/responsive.html#important-note\n            // https://stackoverflow.com/a/48770978/7086623\n            position: \"relative\",\n            // Set the maximum width of zoomed heads such that a head with just a\n            // few tokens doesn't have crazy large boxes per token and the chart\n            // doesn't overflow the screen. Other heads fill their width.\n            maxWidth: zoomed\n              ? `min(100%, ${Math.round(tokens.length * 8)}em)`\n              : \"initial\",\n            width: zoomed ? \"initial\" : \"100%\",\n            aspectRatio: \"1/1\"\n          }}\n        >\n          <Chart\n            type=\"matrix\"\n            options={options}\n            data={data}\n            width={1000}\n            height={1000}\n            updateMode=\"none\"\n          />\n        </div>\n      </Row>\n    </Col>\n  );\n}\n\nexport interface AttentionPatternProps {\n  /**\n   * Attention head activations\n   *\n   * Of the shape [ dest_pos x src_pos ]\n   */\n  attention: number[][];\n\n  /**\n   * Maximum value\n   *\n   * Used to determine how dark the token color is when positive (i.e. based on\n   * how close it is to the maximum value).\n   *\n   * @default Math.max(...values)\n   */\n  maxValue?: number;\n\n  /**\n   * Minimum value\n   *\n   * Used to determine how dark the token color is when negative (i.e. based on\n   * how close it is to the minimum value).\n   *\n   * @default Math.min(...values)\n   */\n  minValue?: number;\n\n  /**\n   * Negative color\n   *\n   * Color to use for negative values. This can be any valid CSS color string.\n   *\n   * Be mindful of color blindness if not using the default here.\n   *\n   * @default red\n   *\n   * @example rgb(255, 0, 0)\n   *\n   * @example #ff0000\n   */\n  negativeColor?: string;\n\n  /**\n   * Positive color\n   *\n   * Color to use for positive values. This can be any valid CSS color string.\n   *\n   * Be mindful of color blindness if not using the default here.\n   *\n   * @default blue\n   *\n   * @example rgb(0, 0, 255)\n   *\n   * @example #0000ff\n   */\n  positiveColor?: string;\n\n  /**\n   * Mask upper triangular\n   *\n   * Whether or not to mask the upper triangular portion of the attention patterns.\n   *\n   * Should be true for causal attention, false for bidirectional attention.\n   *\n   * @default true\n   */\n  maskUpperTri?: boolean;\n\n  /**\n   * Upper triangular color\n   *\n   * Color to use for the upper triangular part of the attention pattern to make visualization slightly nicer.\n   * Only applied if maskUpperTri is set to true.\n   *\n   * @default rgb(200, 200, 200)\n   *\n   * @example rgb(200, 200, 200)\n   *\n   * @example #C8C8C8\n   */\n  upperTriColor?: string;\n\n  /**\n   * Show axis labels\n   */\n  showAxisLabels?: boolean;\n\n  /**\n   * Is this a zoomed in view?\n   */\n  zoomed?: boolean;\n\n  /**\n   * List of tokens\n   *\n   * Must be the same length as the list of values.\n   */\n  tokens: string[];\n}\n", "import { useState } from \"react\";\n\nexport interface UseHoverLockState {\n  focused: number;\n  onClick: (element: number) => void;\n  onMouseEnter: (element: number) => void;\n  onMouseLeave: () => void;\n}\n\n/**\n * Track which element from a set is focussed\n *\n * Prioritizes an element being locked (clicked) rather than hovered.\n */\nexport function useHoverLock(\n  default_locked: number | null = null\n): UseHoverLockState {\n  const [hoveredElement, setHoveredElement] = useState<number | null>(null);\n  const [lockedElement, setLockedElement] = useState<number | null>(\n    default_locked\n  );\n\n  function onClick(element: number): void {\n    setLockedElement(element);\n  }\n\n  function onMouseEnter(element: number): void {\n    setHoveredElement(element);\n  }\n\n  function onMouseLeave(): void {\n    setHoveredElement(null);\n  }\n\n  const focused = hoveredElement ?? lockedElement;\n\n  return {\n    focused: focused as number,\n    onClick,\n    onMouseEnter,\n    onMouseLeave\n  };\n}\n", "import React, { useMemo, useState } from \"react\";\nimport { einsum, Rank, tensor, Tensor3D, Tensor4D } from \"@tensorflow/tfjs\";\nimport tinycolor from \"tinycolor2\";\nimport { AttentionImage } from \"./components/AttentionImage\";\nimport { Tokens, TokensView } from \"./components/AttentionTokens\";\nimport { useHoverLock } from \"./components/useHoverLock\";\n\n/**\n * Color the attention values by heads\n *\n * We want attention values to be colored by each head (i.e. becoming [heads x\n * dest_tokens x src_tokens x rgb_color_channel]). This way, when outputting an\n * image of just one attention head it will be colored (by the specific hue\n * assigned to that attention head) rather than grayscale.\n *\n * Importantly, when outputting an image that averages\n * several attention heads we can then also average over the colors (so that we\n * can see for each destination-source token pair which head is most important).\n * For example, if the specific pair is very red, it suggests that the red\n * attention head is most important for this destination-source token combination.\n *\n * @param attentionInput Attention input as [dest_tokens x source_tokens x\n * heads] array (this is the format provided by the Python interface).\n *\n * @returns Tensor of the shape [heads x dest_tokens x src_tokens x\n * rgb_color_channel]\n */\nexport function colorAttentionTensors(attentionInput: number[][][]): Tensor4D {\n  // Create a TensorFlow tensor from the attention data\n  const attentionTensor = tensor<Rank.R3>(attentionInput); // [heads x dest_tokens x source_tokens]\n\n  const attention = attentionTensor.arraySync() as number[][][];\n\n  // Set the colors\n  const colored = attention.map((head, headNumber) =>\n    head.map((destination) =>\n      destination.map((sourceAttention) => {\n        // Color\n        const attentionColor = tinycolor({\n          h: (headNumber / attention.length) * 360, // Hue (degrees 0-360)\n          s: 0.8, // Saturation (slightly off 100% to make less glaring)\n          l: 1 - 0.75 * sourceAttention // Luminance (shows amount of attention)\n        });\n\n        // Return as a nested list in the format [red, green, blue]\n        const { r, g, b } = attentionColor.toRgb();\n        return [r, g, b];\n      })\n    )\n  );\n\n  return tensor(colored);\n}\n\n/**\n * Attention Patterns\n *\n * @deprecated Use `AttentionHeads` instead.\n */\nexport function AttentionPatterns({\n  tokens,\n  attention,\n  headLabels\n}: {\n  /** Array of tokens e.g. `[\"Hello\", \"my\", \"name\", \"is\"...]` */\n  tokens: string[];\n  /** Attention input as [dest_tokens x source_tokens x heads] (JSON stringified) */\n  attention: number[][][];\n  /** Head labels */\n  headLabels?: string[];\n}) {\n  // State for the token view type\n  const [tokensView, setTokensView] = useState<TokensView>(\n    TokensView.DESTINATION_TO_SOURCE\n  );\n\n  // Attention head focussed state\n  const {\n    focused: focusedHead,\n    onClick: onClickHead,\n    onMouseEnter: onMouseEnterHead,\n    onMouseLeave: onMouseLeaveHead\n  } = useHoverLock();\n\n  // State for which token is focussed\n  const {\n    focused: focussedToken,\n    onClick: onClickToken,\n    onMouseEnter: onMouseEnterToken,\n    onMouseLeave: onMouseLeaveToken\n  } = useHoverLock();\n\n  // Color the attention values (by head)\n  const coloredAttention = useMemo(\n    () => colorAttentionTensors(attention),\n    [attention]\n  );\n  const heads = coloredAttention.unstack<Tensor3D>(0);\n\n  // Max attention color across all heads\n  // This is helpful as we can see if, for example, only one or two colored\n  // heads are focussing on a specific source token from a destination token.\n  // To do this we re-arrange to put heads at the last dimension and then max\n  // this (by color darkness, so min in terms of rgb values)\n  const maxAttentionAcrossHeads = einsum(\"hdsc -> dsch\", coloredAttention).min(\n    3\n  );\n\n  // Get the focused head based on the state (selected/hovered)\n  const focusedAttention =\n    focusedHead === null ? maxAttentionAcrossHeads : heads[focusedHead];\n\n  return (\n    <div>\n      <div style={{ display: \"flex\" }}>\n        <div>\n          <h4>Attention Patterns</h4>\n          <AttentionImage coloredAttention={focusedAttention as any} />\n        </div>\n\n        <div style={{ marginLeft: 15 }}>\n          <h4>\n            Head selector\n            <span style={{ fontWeight: \"normal\" }}>\n              {\" \"}\n              (hover to focus, click to lock)\n            </span>\n          </h4>\n          <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n            {heads.map((head, headNumber) => (\n              <figure\n                key={headNumber}\n                style={{\n                  margin: 0,\n                  marginRight: 15\n                }}\n                onClick={() => onClickHead(headNumber)}\n                onMouseEnter={() => onMouseEnterHead(headNumber)}\n                onMouseLeave={onMouseLeaveHead}\n              >\n                <AttentionImage\n                  coloredAttention={head}\n                  style={{ width: 80 }}\n                  isSelected={headNumber === focusedHead}\n                />\n                <figcaption>\n                  {headLabels?.[headNumber] ?? `Head ${headNumber}`}\n                </figcaption>\n              </figure>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"tokens\">\n        <h4 style={{ display: \"inline-block\", marginRight: 15 }}>\n          Tokens\n          <span style={{ fontWeight: \"normal\" }}> (click to focus)</span>\n        </h4>\n        <select\n          value={tokensView}\n          onChange={(e) => setTokensView(e.target.value as any)}\n        >\n          <option value={TokensView.DESTINATION_TO_SOURCE}>\n            Source \u2190 Destination\n          </option>\n          <option value={TokensView.SOURCE_TO_DESTINATION}>\n            Destination \u2190 Source\n          </option>\n        </select>\n        <div>\n          <Tokens\n            coloredAttention={coloredAttention}\n            focusedHead={focusedHead}\n            focusedToken={focussedToken}\n            onClickToken={onClickToken}\n            onMouseEnterToken={onMouseEnterToken}\n            onMouseLeaveToken={onMouseLeaveToken}\n            tokens={tokens}\n            tokensView={tokensView}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n", "import React, { CSSProperties, useEffect, useRef } from \"react\";\nimport { browser, Tensor3D } from \"@tensorflow/tfjs\";\n\nexport interface AttentionImageProps {\n  /**\n   * Attention patterns (destination to source tokens), colored by attention head\n   *\n   * Should be [n_tokens x n_tokens x color_channels]\n   */\n  coloredAttention: Tensor3D;\n\n  style?: CSSProperties;\n\n  /** Adds a box-shadow to the canvas when true */\n  isSelected?: boolean;\n}\n\n/**\n * Attention Image\n *\n * Shows the attention from destination tokens to source tokens, as a [n_tokens\n * x n_tokens] image.\n */\nexport function AttentionImage({\n  coloredAttention,\n  style = {},\n  isSelected = false\n}: AttentionImageProps) {\n  // Add a reference to the HTML Canvas element in the DOM, so we can update it\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  // Draw the attention pattern onto the HTML Canvas\n  // Runs in `useEffect` as we need the canvas to be added to the DOM first,\n  // before we can interact with it.\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    browser.toPixels(coloredAttention.toInt(), canvas as HTMLCanvasElement);\n  }, [coloredAttention]);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      style={{\n        // Set as pixelated, so that attention patterns aren't blurred\n        // together.\n        imageRendering: \"pixelated\",\n        // Border\n        borderColor: isSelected ? \"rgba(0,0,200,0.5)\" : \"#DDD\",\n        borderStyle: \"solid\",\n        borderWidth: 1,\n        // Focussed box shadow\n        boxShadow: isSelected ? \"0px 0px 3px 3px rgba(0,0,200,0.4)\" : undefined,\n        // Default width\n        width: 200,\n        // Any other style settings\n        ...style\n      }}\n    />\n  );\n}\n", "import { einsum, Rank, Tensor, Tensor3D, Tensor4D } from \"@tensorflow/tfjs\";\nimport tinycolor from \"tinycolor2\";\nimport React from \"react\";\n\nexport enum TokensView {\n  DESTINATION_TO_SOURCE = \"DESTINATION_TO_SOURCE\",\n  SOURCE_TO_DESTINATION = \"SOURCE_TO_DESTINATION\"\n}\n\n/**\n * Get the relevant attention values to average (for an individual token)\n *\n * Used to calculate the color of a specific token block (div).\n *\n * @param maxAttentionAcrossHeads [dest_tokens x src_tokens x rgb]\n * @param tokenIndex Current token index\n * @param tokensView\n * @param focusedToken Selected/focused token\n *\n * @returns Relevant tokens from which to average the color [dest_tokens x src_tokens x rgb]\n */\nexport function getTokensToAverage(\n  maxAttentionAcrossHeads: Tensor3D,\n  tokenIndex: number,\n  tokensView: TokensView,\n  focusedToken?: number\n): Tensor3D {\n  // Default: If no tokens are selected, we're going to average over all source\n  // tokens available to look at (i.e. up to this current token)\n  // Note: End values are inclusive\n  let destinationStart: number = tokenIndex;\n  let destinationEnd: number = tokenIndex;\n  let sourceStart: number = 0;\n  let sourceEnd: number = tokenIndex;\n\n  // If a token is selected (and we're showing destination -> source attention),\n  // show the attention from the selected destination token to this token.\n  if (\n    typeof focusedToken === \"number\" &&\n    tokensView === TokensView.DESTINATION_TO_SOURCE\n  ) {\n    destinationStart = focusedToken;\n    destinationEnd = focusedToken;\n    sourceStart = tokenIndex;\n    sourceEnd = tokenIndex;\n  }\n\n  // If a token is selected (but instead we're showing source -> destination),\n  // show the attention from the selected source token to this token.\n  else if (\n    typeof focusedToken === \"number\" &&\n    tokensView === TokensView.SOURCE_TO_DESTINATION\n  ) {\n    destinationStart = tokenIndex;\n    destinationEnd = tokenIndex;\n    sourceStart = focusedToken;\n    sourceEnd = focusedToken;\n  }\n\n  return maxAttentionAcrossHeads.slice(\n    [destinationStart, sourceStart],\n    [destinationEnd + 1 - destinationStart, sourceEnd + 1 - sourceStart]\n  );\n}\n\n/**\n * Individual Token\n */\nexport function Token({\n  focusedToken,\n  onClickToken,\n  onMouseEnterToken,\n  onMouseLeaveToken,\n  maxAttentionAcrossHeads,\n  text,\n  tokenIndex,\n  tokensView\n}: {\n  focusedToken?: number;\n  onClickToken: (e: number) => void;\n  onMouseEnterToken: (e: number) => void;\n  onMouseLeaveToken: () => void;\n  maxAttentionAcrossHeads: Tensor3D;\n  text: string;\n  tokenIndex: number;\n  tokensView: TokensView;\n}) {\n  const isFocused = focusedToken !== null && focusedToken === tokenIndex;\n\n  // Get the average of the colors of the source tokens that we can attend to.\n  const relevantTokens = getTokensToAverage(\n    maxAttentionAcrossHeads,\n    tokenIndex,\n    tokensView,\n    focusedToken\n  );\n\n  const averageColor = relevantTokens\n    .mean<Tensor<Rank.R2>>(0)\n    .mean<Tensor<Rank.R1>>(0);\n  const [r, g, b] = averageColor.arraySync();\n  const backgroundColor = tinycolor({ r, g, b });\n\n  // Set the text color to always be visible (allowing for the background color)\n  const textColor = backgroundColor.getBrightness() < 180 ? \"white\" : \"black\";\n\n  return (\n    <button\n      style={{\n        backgroundColor: backgroundColor.toRgbString(),\n        borderColor: \"#DDD\",\n        borderStyle: \"solid\",\n        borderWidth: 0,\n        borderRightWidth: 1,\n        color: textColor,\n        display: \"inline-block\",\n        marginBottom: 3,\n        padding: \"3px 0px\",\n        // Focussed box shadow\n        boxShadow: isFocused ? \"0px 0px 3px 3px rgba(0,0,200,0.4)\" : undefined\n      }}\n      onClick={() => onClickToken(tokenIndex)}\n      onMouseEnter={() => onMouseEnterToken(tokenIndex)}\n      onMouseLeave={onMouseLeaveToken}\n      // Dangerously set so that we can print un-escaped html characters\n      dangerouslySetInnerHTML={{ __html: text.replace(\" \", \"&nbsp;\") }}\n    />\n  );\n}\n\n/**\n * Tokens\n *\n * Each token is shown as block (div) with the token text inside of it. When you\n * click on a token, it updates all the other tokens in this list to show how\n * much those tokens are attended to by this one (or attended from if TokenView\n * is set as Source -> Destination instead). The values are averaged over\n * attention heads unless a specific head is selected.\n */\nexport function Tokens({\n  coloredAttention,\n  focusedHead,\n  focusedToken,\n  onClickToken,\n  onMouseEnterToken,\n  onMouseLeaveToken,\n  tokens,\n  tokensView\n}: {\n  coloredAttention: Tensor4D;\n  focusedHead?: number;\n  focusedToken?: number;\n  onClickToken: (e: number) => void;\n  onMouseEnterToken: (e: number) => void;\n  onMouseLeaveToken: () => void;\n  tokens: string[];\n  tokensView: TokensView;\n}) {\n  // Just use the focused head colors if selected\n  const focusedAttention =\n    typeof focusedHead === \"number\"\n      ? coloredAttention.slice([focusedHead], [1])\n      : coloredAttention;\n\n  // Get the max attention across attention heads (by color darkness, so min in\n  // terms of rgb values)\n  const maxAttentionAcrossHeads = einsum(\n    \"hdsc -> dsch\",\n    focusedAttention\n  ).min<Tensor3D>(3);\n\n  return (\n    <div>\n      {tokens.map((text, tokenIndex) => (\n        <Token\n          focusedToken={focusedToken}\n          onClickToken={onClickToken}\n          onMouseEnterToken={onMouseEnterToken}\n          onMouseLeaveToken={onMouseLeaveToken}\n          key={tokenIndex}\n          maxAttentionAcrossHeads={maxAttentionAcrossHeads}\n          text={text}\n          tokenIndex={tokenIndex}\n          tokensView={tokensView}\n        />\n      ))}\n    </div>\n  );\n}\n", "// react/src/components/SaeVis.tsx\nimport { scaleLinear, scaleSequential } from \"d3-scale\";\nimport * as chromatic from \"d3-scale-chromatic\";\nimport React, {\n  CSSProperties,\n  useCallback,\n  useMemo,\n  useRef,\n  useState\n} from \"react\";\n\n// --- Helper: Luminance Calculation (Simple) ---\n// Calculates approximate luminance (0=black, 1=white)\n// Based on https://stackoverflow.com/a/1855903/1421333\nfunction getLuminance(hexColorInput: string): number {\n  if (!hexColorInput || hexColorInput.length < 4) return 1; // Default to white for invalid colors\n  let hexColor = hexColorInput; // Assign to new variable\n  // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hexColor = hexColor.replace(shorthandRegex, (m, r, g, b) => {\n    return r + r + g + g + b + b;\n  });\n\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hexColor);\n  if (!result) return 1;\n\n  const r = parseInt(result[1], 16);\n  const g = parseInt(result[2], 16);\n  const b = parseInt(result[3], 16);\n\n  // Formula weights from WCAG\n  return (0.2126 * r + 0.7152 * g + 0.0722 * b) / 255;\n}\n\n// --- Colormap Lookup ---\n// Add custom Claude Oranges interpolator\nconst claudeOrangeInterpolator = scaleLinear<string>()\n  .domain([0, 0.5, 1]) // Domain points for the colors\n  .range([\"#ffffff\", \"#ff9966\", \"#ff6633\"]) // White at zero, then orange to dark orange\n  .clamp(true); // Clamp values outside 0-1\n\n// Consolidated clamping function for all color scales\nfunction createColorScale(\n  interpolator: (t: number) => string,\n  domain: [number, number] | [number, number, number],\n  options: {\n    minClamp?: number;\n    maxClamp?: number;\n    isDiverging?: boolean;\n    shouldApplyRangeClamp?: boolean;\n  } = {}\n): (t: number) => string {\n  const {\n    minClamp = 0,\n    maxClamp = 0.7,\n    isDiverging = false,\n    shouldApplyRangeClamp = true\n  } = options;\n\n  // For regular sequential scales with range clamping\n  if (!isDiverging && shouldApplyRangeClamp) {\n    // Apply range adjustment to avoid pure black/white\n    const adjustedInterpolator = (t: number) =>\n      interpolator(t * (maxClamp - minClamp) + minClamp);\n\n    return scaleSequential(adjustedInterpolator)\n      .domain(domain as [number, number])\n      .clamp(true);\n  }\n\n  // For diverging scales or when range clamping is disabled\n  if (isDiverging) {\n    return scaleSequential(interpolator)\n      .domain(domain as [number, number, number])\n      .clamp(true);\n  }\n\n  // Default fallback - just clamp without range adjustments\n  return scaleSequential(interpolator)\n    .domain(domain as [number, number])\n    .clamp(true);\n}\n\n// Legacy wrapper for backward compatibility\nfunction clampInterpolator(\n  interpolator: (t: number) => string,\n  minClamp = 0,\n  maxClamp = 0.7\n): (t: number) => string {\n  return (t: number) => interpolator(t * (maxClamp - minClamp) + minClamp);\n}\n\nconst d3ColorMapLookup: { [key: string]: (t: number) => string } = {\n  claudeOranges: claudeOrangeInterpolator,\n  viridis: chromatic.interpolateViridis,\n  plasma: chromatic.interpolatePlasma,\n  inferno: clampInterpolator(chromatic.interpolateInferno),\n  magma: clampInterpolator(chromatic.interpolateMagma),\n  cividis: chromatic.interpolateCividis,\n  gray: clampInterpolator(chromatic.interpolateGreys, 0.1, 0.9),\n  coolwarm: chromatic.interpolateWarm,\n  rdylbu: chromatic.interpolateRdYlBu,\n  piyg: chromatic.interpolatePiYG,\n  prgn: chromatic.interpolatePRGn,\n  spectral: chromatic.interpolateSpectral,\n  blues: chromatic.interpolateBlues,\n  greens: chromatic.interpolateGreens,\n  reds: chromatic.interpolateReds,\n  oranges: chromatic.interpolateOranges,\n  purples: chromatic.interpolatePurples\n};\n\n// Identify diverging color maps\nconst divergingColorMapKeys = [\n  \"coolwarm\",\n  \"rdylbu\",\n  \"piyg\",\n  \"prgn\",\n  \"spectral\"\n];\n\n// --- Interfaces ---\n\n/**\n * Props for the SaeVis component.\n */\ninterface SaeVisProps {\n  /** Array of token strings */\n  tokens: string[];\n  /**\n   * 2D array of feature activations [token][feature].\n   * Assumed to be dense and correspond positionally to `featureLabels` and `featureIDs`.\n   */\n  featureActivations: number[][]; // [token][feature]\n  /** Array of labels for each feature. */\n  featureLabels: string[];\n  /**\n   * Optional array of actual feature IDs corresponding to the columns in `featureActivations`.\n   * If provided, these IDs will be used for display purposes.\n   * If omitted, indices 0 to N-1 will be assumed as IDs.\n   */\n  featureIDs?: number[]; // Renamed from featureIndices\n  /** Number of top features to show in the token hover tooltip. @default 5 */\n  numTopFeaturesPerToken?: number;\n  /** Number of top features to show in the overall ranked list. @default 20 */\n  numTopFeaturesOverall?: number;\n  /** Initial metric for ranking features ('max', 'l1', 'l0'). @default 'max' */\n  initialRankingMetric?: \"max\" | \"l1\" | \"l0\";\n  /** Activation threshold for L0 calculation and dimming. @default null */\n  activationThreshold?: number | null;\n  /** Initial D3 color map scheme string (e.g., 'reds', 'coolwarm'). @default 'reds' */\n  colorMap?: string;\n  /** Optional midpoint for diverging color maps. @default null */\n  colorMidpoint?: number | null;\n}\n\ninterface FeatureInfo {\n  index: number; // This remains the Feature ID\n  label: string;\n  score: number; // Based on ranking metric\n  maxActivation: number; // Always useful to have\n  meanAbsActivation: number;\n  nonZeroCount: number;\n}\n\ninterface TokenFeatureInfo {\n  index: number; // This remains the Feature ID\n  label: string;\n  activation: number;\n}\n\n// Renamed from TooltipData - now only for hover tooltips\ninterface HoverTokenTooltipData {\n  tokenIndex: number;\n  topFeatures: TokenFeatureInfo[];\n  selectedFeatureValue: number | null;\n  position: { x: number; y: number };\n  // Removed type property as it's always hover now\n}\n\n// For compact feature tooltip\ninterface FocusedFeatureData {\n  index: number;\n  label: string;\n  maxActivation: number;\n  meanAbsActivation: number;\n  nonZeroCount: number;\n  isClick: boolean;\n  position: { x: number; y: number };\n}\n\n// --- Helper Functions ---\n\nfunction calculateFeatureScores(\n  activations: number[][], // [token][feature]\n  labels: string[],\n  featureIDs: number[] | undefined, // Renamed from featureIndices\n  threshold: number | null = null\n): FeatureInfo[] {\n  if (!activations.length || !activations[0]?.length) return [];\n  const numTokens = activations.length;\n  const numFeatures = activations[0].length;\n  const features: FeatureInfo[] = [];\n  const effectiveThreshold = threshold ?? 0; // Consider 0 if null threshold for L0\n\n  for (let featIdx = 0; featIdx < numFeatures; featIdx++) {\n    let maxAct = -Infinity;\n    let sumAbsAct = 0;\n    let nonZero = 0;\n    for (let tokIdx = 0; tokIdx < numTokens; tokIdx++) {\n      const act = activations[tokIdx]?.[featIdx] ?? 0;\n      if (act > maxAct) maxAct = act;\n      sumAbsAct += Math.abs(act);\n      if (Math.abs(act) > effectiveThreshold) {\n        // Use effective threshold for L0\n        nonZero += 1;\n      }\n    }\n    features.push({\n      index: featureIDs ? featureIDs[featIdx] : featIdx, // Use ID if available\n      label: labels[featIdx] ?? `Feature ${featIdx}`,\n      score: 0, // Will be set based on metric\n      maxActivation: maxAct,\n      meanAbsActivation: sumAbsAct / numTokens,\n      nonZeroCount: nonZero\n    });\n  }\n  return features;\n}\n\nfunction rankFeatures(\n  features: FeatureInfo[],\n  metric: \"max\" | \"l1\" | \"l0\"\n): FeatureInfo[] {\n  return [...features].sort((a, b) => {\n    let scoreA = 0;\n    let scoreB = 0;\n    switch (metric) {\n      case \"l1\":\n        scoreA = a.meanAbsActivation;\n        scoreB = b.meanAbsActivation;\n        break;\n      case \"l0\":\n        scoreA = a.nonZeroCount;\n        scoreB = b.nonZeroCount;\n        break;\n      case \"max\":\n      default:\n        scoreA = a.maxActivation;\n        scoreB = b.maxActivation;\n        break;\n    }\n    // Descending order\n    return scoreB - scoreA;\n  });\n}\n\nfunction getTopFeaturesForToken(\n  tokenIndex: number,\n  activations: number[][], // [token][feature]\n  labels: string[],\n  featureIDs: number[] | undefined, // Renamed from featureIndices\n  count: number,\n  threshold: number | null\n): TokenFeatureInfo[] {\n  if (!activations[tokenIndex]) return [];\n  const numFeatures = activations[0]?.length ?? 0;\n  const featuresForToken: TokenFeatureInfo[] = [];\n\n  for (let featIdx = 0; featIdx < numFeatures; featIdx++) {\n    const act = activations[tokenIndex][featIdx] ?? 0;\n    if (threshold === null || Math.abs(act) >= threshold) {\n      featuresForToken.push({\n        index: featureIDs ? featureIDs[featIdx] : featIdx, // Use ID if available\n        label: labels[featIdx] ?? `Feature ${featIdx}`,\n        activation: act\n      });\n    }\n  }\n\n  // Sort by absolute activation for general importance in tooltip, descending\n  return featuresForToken\n    .sort((a, b) => Math.abs(b.activation) - Math.abs(a.activation))\n    .slice(0, count);\n}\n\n// --- Styles ---\n\nconst themes = {\n  light: {\n    bg: \"#ffffff\",\n    text: \"#000000\",\n    border: \"#ccc\",\n    containerBg: \"#f9f9f9\",\n    selectedItemBg: \"#e0e8ff\",\n    selectedItemBorder: \"#4a90e2\",\n    hoverOutline: \"#cccccc\",\n    subtleBorder: \"#eee\",\n    dimText: \"#555\",\n    closeButton: \"#aaa\",\n    boxHoverBg: \"#f0f0f0\" // Subtle hover for selected boxes\n  },\n  dark: {\n    bg: \"#1e1e1e\",\n    text: \"#e0e0e0\",\n    border: \"#555\",\n    containerBg: \"#2a2a2a\",\n    selectedItemBg: \"#3a4a7e\",\n    selectedItemBorder: \"#6a90e2\",\n    hoverOutline: \"#777777\",\n    subtleBorder: \"#444\",\n    dimText: \"#aaa\",\n    closeButton: \"#ccc\",\n    boxHoverBg: \"#333333\" // Subtle hover for selected boxes\n  },\n  \"claude-brown\": {\n    bg: \"hsl(30, 40%, 96%)\", // Creamy background\n    text: \"hsl(30, 30%, 20%)\", // Dark brown text\n    border: \"hsl(30, 20%, 70%)\", // Light brown border\n    containerBg: \"hsl(30, 30%, 90%)\", // Slightly darker container bg\n    selectedItemBg: \"hsl(30, 50%, 80%)\", // Soft orange-brown selection\n    selectedItemBorder: \"hsl(30, 70%, 50%)\", // Stronger orange border\n    hoverOutline: \"hsl(30, 30%, 60%)\", // Medium brown hover\n    subtleBorder: \"hsl(30, 25%, 85%)\", // Very light brown subtle border\n    dimText: \"hsl(30, 20%, 40%)\", // Muted brown dim text\n    closeButton: \"hsl(30, 25%, 50%)\", // Medium brown close button\n    boxHoverBg: \"hsl(30, 35%, 92%)\" // Slightly darker cream hover\n  }\n};\n\nconst getStyles = (\n  mode: \"light\" | \"dark\" | \"claude-brown\",\n  claudeModeActive: boolean\n): { [key: string]: CSSProperties } => {\n  const theme = themes[mode] ?? themes.light;\n  return {\n    container: {\n      fontFamily: claudeModeActive ? \"sans-serif\" : \"sans-serif\",\n      padding: \"10px\",\n      border: `1px solid ${theme.border}`,\n      borderRadius: \"5px\",\n      position: \"relative\",\n      backgroundColor: theme.bg,\n      color: theme.text\n    },\n    controls: {\n      marginBottom: \"10px\",\n      display: \"flex\",\n      gap: \"15px\",\n      alignItems: \"center\",\n      flexWrap: \"wrap\",\n      flexShrink: 0 // Prevent controls from shrinking\n    },\n    featureSearch: { marginBottom: \"10px\" },\n    featureListContainer: {\n      marginBottom: \"15px\",\n      maxHeight: \"200px\", // Initial height, can be toggled\n      overflowY: \"auto\",\n      border: `1px solid ${theme.subtleBorder}`,\n      backgroundColor: theme.containerBg\n    },\n    featureListItem: {\n      padding: \"5px 8px\",\n      cursor: \"pointer\",\n      borderBottom: `1px solid ${theme.subtleBorder}`,\n      fontSize: \"0.9em\",\n      display: \"flex\",\n      justifyContent: \"space-between\"\n    },\n    featureListItemHover: { outline: `1px solid ${theme.hoverOutline}` },\n    featureListItemSelected: {\n      backgroundColor: theme.selectedItemBg,\n      fontWeight: \"bold\",\n      borderLeft: `3px solid ${theme.selectedItemBorder}`,\n      color: theme.text // Ensure text contrasts\n    },\n    featureScore: { color: theme.dimText, fontSize: \"0.9em\" },\n\n    // NEW: Selected Features Area Container\n    selectedFeaturesContainer: {\n      marginTop: \"15px\",\n      marginBottom: \"15px\",\n      padding: \"10px\",\n      border: `1px solid ${theme.border}`,\n      borderRadius: \"4px\",\n      maxHeight: \"200px\", // Limit height\n      overflowY: \"auto\", // Allow scrolling\n      flexShrink: 0 // Prevent shrinking\n    },\n    // NEW: Individual Selected Feature Box\n    selectedFeatureInfoBox: {\n      border: `1px solid ${theme.border}`,\n      borderRadius: \"3px\",\n      padding: \"8px\",\n      marginBottom: \"8px\",\n      backgroundColor: theme.bg,\n      position: \"relative\",\n      fontSize: \"0.9em\",\n      transition: \"background-color 0.1s ease-in-out\" // Added for hover effect\n    },\n    // NEW: Value indicator within feature box\n    featureValueIndicator: {\n      display: \"inline-flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      width: \"auto\",\n      minWidth: \"2.5em\",\n      height: \"1.5em\",\n      marginLeft: \"5px\",\n      border: `1px solid ${theme.border}`,\n      borderRadius: \"3px\",\n      verticalAlign: \"middle\",\n      padding: \"0 4px\",\n      fontSize: \"0.85em\",\n      overflow: \"hidden\",\n      whiteSpace: \"nowrap\"\n    },\n    // Existing Selected Tokens Area Container\n    selectedTokensContainer: {\n      marginTop: \"15px\",\n      marginBottom: \"5px\",\n      padding: \"10px\",\n      border: `1px solid ${theme.border}`,\n      borderRadius: \"4px\",\n      maxHeight: \"200px\", // Limit height\n      overflowY: \"auto\", // Allow scrolling\n      flexShrink: 0 // Prevent shrinking\n    },\n    selectedTokensContainerCompactWrap: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      gap: \"5px\"\n    },\n    // Existing Individual Selected Token Box\n    selectedTokenInfoBox: {\n      border: `1px solid ${theme.border}`,\n      borderRadius: \"3px\",\n      padding: \"8px\",\n      marginBottom: \"8px\",\n      backgroundColor: theme.bg,\n      position: \"relative\",\n      fontSize: \"0.9em\",\n      transition: \"background-color 0.1s ease-in-out\" // Added for hover effect\n    },\n    selectedTokenInfoBoxCompactTile: {\n      border: `1px solid ${theme.border}`,\n      borderRadius: \"3px\",\n      padding: \"2px 5px\",\n      backgroundColor: theme.bg,\n      fontSize: \"0.85em\",\n      display: \"inline-flex\",\n      alignItems: \"center\",\n      gap: \"4px\",\n      whiteSpace: \"nowrap\"\n    },\n    // Shared Close Button Style (adjust color)\n    selectedItemCloseButton: {\n      position: \"absolute\",\n      top: \"2px\",\n      right: \"5px\",\n      background: \"none\",\n      border: \"none\",\n      color: theme.closeButton,\n      cursor: \"pointer\",\n      fontSize: \"1.2em\",\n      padding: \"0\",\n      lineHeight: \"1\"\n    },\n    tokenSequence: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      gap: \"0\",\n      lineHeight: 1.2,\n      border: `1px solid ${theme.subtleBorder}`,\n      padding: \"5px\",\n      marginTop: \"10px\",\n      flexShrink: 0, // Prevent shrinking\n      letterSpacing: \"normal\" // Default letter spacing for container\n    },\n    token: {\n      padding: \"0\",\n      margin: \"-1px -1px 0 -1px\", // Negative margin to pull tokens closer together\n      borderRadius: \"2px\",\n      cursor: \"pointer\",\n      whiteSpace: \"pre\", // Preserve all whitespace exactly\n      border: \"1px solid transparent\",\n      transition: \"outline 0.1s ease-in-out, background-color 0.1s ease-in-out\",\n      letterSpacing: \"0.08em\", // Restore original letter spacing\n      display: \"inline-block\", // Restore inline-block for layout\n      position: \"relative\",\n      verticalAlign: \"middle\", // Restore vertical alignment\n      lineHeight: 1.2,\n      overflow: \"visible\"\n    },\n    tokenTextOverlay: {\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      padding: \"2px 0px\",\n      zIndex: 1,\n      pointerEvents: \"none\",\n      width: \"100%\",\n      height: \"100%\",\n      letterSpacing: \"0.08em\" // Match token letter spacing\n    },\n    tokenHover: {\n      outline: `1px solid ${theme.hoverOutline}`,\n      outlineOffset: \"0px\"\n    },\n    tokenClicked: {\n      outline: `2px solid ${theme.selectedItemBorder}`,\n      outlineOffset: \"-1px\",\n      textDecoration: \"underline\",\n      textUnderlineOffset: \"2px\"\n    },\n    tooltip: {\n      position: \"absolute\",\n      backgroundColor:\n        mode === \"light\" ? \"rgba(0, 0, 0, 0.85)\" : \"rgba(40, 40, 40, 0.9)\",\n      color: mode === \"light\" ? \"white\" : \"#e0e0e0\",\n      padding: \"8px 10px\",\n      borderRadius: \"4px\",\n      fontSize: \"0.85em\",\n      zIndex: 10,\n      maxWidth: \"350px\",\n      pointerEvents: \"none\",\n      boxShadow: \"0 2px 5px rgba(0,0,0,0.2)\"\n    },\n    tooltipSticky: { pointerEvents: \"auto\" },\n    tooltipCloseButton: {\n      position: \"absolute\",\n      top: \"2px\",\n      right: \"5px\",\n      background: \"none\",\n      border: \"none\",\n      color: mode === \"light\" ? \"#ccc\" : \"#aaa\",\n      cursor: \"pointer\",\n      fontSize: \"1.2em\",\n      padding: \"0\",\n      lineHeight: \"1\"\n    },\n    tooltipFeature: { padding: \"2px 0\", cursor: \"pointer\" },\n    tooltipFeatureHover: { textDecoration: \"underline\" },\n    inputGroup: { display: \"flex\", alignItems: \"center\", gap: \"5px\" },\n    compactButton: { padding: \"2px 6px\", fontSize: \"0.8em\" },\n    featureGrid: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      gap: \"3px\",\n      padding: \"5px\"\n    },\n    featureTile: {\n      padding: \"1px 2px\",\n      fontSize: \"0.85em\",\n      border: `1px solid ${theme.border}`,\n      borderRadius: \"3px\",\n      cursor: \"pointer\",\n      textAlign: \"center\",\n      whiteSpace: \"nowrap\",\n      minWidth: \"2.5em\"\n    },\n    featureTileHover: { outline: `1px solid ${theme.hoverOutline}` },\n    featureTileSelected: {\n      backgroundColor: theme.selectedItemBg,\n      fontWeight: \"bold\",\n      borderColor: theme.selectedItemBorder,\n      color: theme.text\n    },\n    mainContentArea: {\n      display: \"flex\",\n      flexDirection: \"column\"\n    },\n    featureListIndexValue: {\n      fontWeight: \"bold\",\n      marginRight: \"5px\"\n    },\n    featureListDescription: {\n      color: theme.dimText\n    },\n    dynamicInfoLabel: {\n      fontStyle: \"italic\",\n      marginRight: \"5px\"\n    }\n  };\n};\n\n// Helper to format ranking metric name for display\nconst getRankingMetricDisplayName = (metric: \"max\" | \"l1\" | \"l0\"): string => {\n  switch (metric) {\n    case \"l1\":\n      return \"L1\";\n    case \"l0\":\n      return \"L0\";\n    case \"max\":\n    default:\n      return \"Max\";\n  }\n};\n\n// --- Component ---\n/**\n * SaeVis Component: Visualizes Sparse Autoencoder feature activations across tokens.\n *\n * Features:\n * - Ranks features by Max Activation, L1 Norm, or L0 Norm.\n * - Colors tokens based on selected/hovered feature activations.\n * - Supports single feature coloring, multi-feature segment coloring, or max-activation coloring.\n * - Allows selection of multiple features and tokens for detailed inspection.\n * - Provides tooltips on token hover showing top activating features for that token.\n * - Includes controls for filtering, thresholds, color maps (incl. diverging with midpoint), and compact view.\n * - Supports display of custom feature IDs.\n */\nexport const SaeVis: React.FC<SaeVisProps> = ({\n  tokens,\n  featureActivations,\n  featureLabels,\n  featureIDs, // Renamed from featureIndices\n  numTopFeaturesPerToken = 5,\n  numTopFeaturesOverall = 20,\n  initialRankingMetric = \"max\",\n  activationThreshold = null,\n  colorMap = \"reds\",\n  colorMidpoint: propsColorMidpoint\n}) => {\n  // --- State ---\n  const [rankingMetric, setRankingMetric] = useState<\"max\" | \"l1\" | \"l0\">(\n    initialRankingMetric\n  );\n  const [currentThreshold, setCurrentThreshold] = useState<number | null>(\n    activationThreshold\n  );\n  const [selectedFeatureIndex, setSelectedFeatureIndex] = useState<\n    number | null\n  >(null);\n  const [hoveredFeatureIndex, setHoveredFeatureIndex] = useState<number | null>(\n    null\n  );\n  const [hoverTokenTooltipData, setHoverTokenTooltipData] =\n    useState<HoverTokenTooltipData | null>(null);\n  const [selectedTokenIndices, setSelectedTokenIndices] = useState<number[]>(\n    []\n  );\n  const [featureSearchTerm, setFeatureSearchTerm] = useState(\"\");\n  const [numOverallToShow, setNumOverallToShow] = useState(\n    numTopFeaturesOverall\n  );\n  const [numTokenToShow, setNumTokenToShow] = useState(numTopFeaturesPerToken);\n  const [minColorBound, setMinColorBound] = useState<number | string | null>(\n    null\n  );\n  const [maxColorBound, setMaxColorBound] = useState<number | string | null>(\n    null\n  );\n  const [colorMidpoint, setColorMidpoint] = useState<number | string | null>(\n    propsColorMidpoint ?? null\n  );\n  const [featureListHeight, setFeatureListHeight] = useState<string>(\"200px\");\n  const [selectedFeaturesHeight, setSelectedFeaturesHeight] =\n    useState<string>(\"200px\");\n  const [focusedFeatureInfo, setFocusedFeatureInfo] =\n    useState<FocusedFeatureData | null>(null);\n\n  // NEW State\n  const [selectedFeatureIndices, setSelectedFeatureIndices] = useState<\n    number[]\n  >([]);\n  const [hoveredTokenIndex, setHoveredTokenIndex] = useState<number | null>(\n    null\n  );\n  const [multiColorTokens, setMultiColorTokens] = useState<boolean>(false);\n  const [colorMode, setColorMode] = useState<\"light\" | \"dark\" | \"claude-brown\">(\n    \"claude-brown\" // Default to claude-brown instead of light\n  );\n  const [selectedColorMap, setSelectedColorMap] = useState<string>(\n    \"claudeOranges\" // Default to claudeOranges instead of colorMap\n  );\n  const [showTokenFeatures, setShowTokenFeatures] = useState<boolean>(false);\n  const [claudeModeActive, setClaudeModeActive] = useState<boolean>(true); // Default to true\n  const [isCompactView, setIsCompactView] = useState<boolean>(false); // Restore state\n\n  // NEW State\n  const [selectedTokensHeight, setSelectedTokensHeight] =\n    useState<string>(\"200px\"); // State for selected tokens height\n\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const styles = useMemo(\n    () => getStyles(colorMode, claudeModeActive),\n    [colorMode, claudeModeActive]\n  );\n  const theme = themes[colorMode] ?? themes.light;\n\n  // --- Memoized Calculations ---\n\n  // Map display IDs back to 0-based array indices for accessing activation data\n  const featureIdToArrayIndexMap = useMemo(() => {\n    const map = new Map<number, number>();\n    if (featureIDs) {\n      featureIDs.forEach((featureId, arrayIndex) => {\n        map.set(featureId, arrayIndex); // Key: Feature ID, Value: Array Index\n      });\n    } else if (featureActivations.length > 0 && featureActivations[0]) {\n      // Assume 0..N-1 if featureIDs not provided\n      const numFeatures = featureActivations[0].length;\n      for (let i = 0; i < numFeatures; i++) {\n        map.set(i, i); // Feature ID is the same as Array Index\n      }\n    }\n    return map;\n  }, [featureIDs, featureActivations]); // Dependency updated\n\n  const allFeatures = useMemo(() => {\n    return calculateFeatureScores(\n      featureActivations,\n      featureLabels,\n      featureIDs, // Pass renamed prop\n      currentThreshold\n    );\n  }, [featureActivations, featureLabels, featureIDs, currentThreshold]); // Dependency updated\n\n  const rankedFeatures = useMemo(() => {\n    const featuresWithScores = allFeatures.map((f) => {\n      let score = 0;\n      switch (rankingMetric) {\n        case \"l1\":\n          score = f.meanAbsActivation;\n          break;\n        case \"l0\":\n          score = f.nonZeroCount;\n          break;\n        case \"max\":\n        default:\n          score = f.maxActivation;\n          break;\n      }\n      return { ...f, score };\n    });\n    return rankFeatures(featuresWithScores, rankingMetric);\n  }, [allFeatures, rankingMetric]);\n\n  const filteredAndRankedFeatures = useMemo(() => {\n    const searchTerm = featureSearchTerm.toLowerCase().trim();\n    if (!searchTerm) return rankedFeatures;\n    return rankedFeatures.filter(\n      (feature) =>\n        feature.label.toLowerCase().includes(searchTerm) ||\n        String(feature.index).includes(searchTerm)\n    );\n  }, [rankedFeatures, featureSearchTerm]);\n\n  const topFilteredAndRankedFeatures = useMemo(() => {\n    return filteredAndRankedFeatures.slice(0, numOverallToShow);\n  }, [filteredAndRankedFeatures, numOverallToShow]);\n\n  // Determine the feature index to use for temporary token coloring\n  // Hover always takes precedence for previewing\n  const coloringFeatureIndex =\n    hoveredFeatureIndex ??\n    (selectedFeatureIndices.length === 1\n      ? selectedFeatureIndices[0]\n      : selectedFeatureIndex);\n\n  // Determine if multi-color modes should be active based *only* on selection state\n  const isMultiSegmentMode =\n    multiColorTokens && selectedFeatureIndices.length >= 2;\n  const isMultiMaximizeMode =\n    !multiColorTokens && selectedFeatureIndices.length >= 1;\n\n  // Find full feature info for selected features (needed for the new list)\n  const selectedFeaturesData = useMemo(() => {\n    return selectedFeatureIndices\n      .map((index) => rankedFeatures.find((f) => f.index === index))\n      .filter((f): f is FeatureInfo => f !== undefined);\n  }, [selectedFeatureIndices, rankedFeatures]);\n\n  // Calculate actual min/max used for scale (needed for placeholder)\n  const calculatedColorBounds = useMemo(() => {\n    // Need array index to access activations\n    const arrayIndex = featureIdToArrayIndexMap.get(coloringFeatureIndex ?? -1);\n    if (arrayIndex === undefined || !featureActivations[0]) {\n      return { min: 0, max: 0 };\n    }\n    const actsForFeature = featureActivations.map(\n      (tokenActs) => tokenActs[arrayIndex] ?? 0 // Corrected: Uses array index\n    );\n    return {\n      min: Math.min(...actsForFeature),\n      max: Math.max(...actsForFeature)\n    };\n  }, [coloringFeatureIndex, featureActivations, featureIdToArrayIndexMap]);\n\n  // UPDATED: Use selectedColorMap state and clamp interpolators from lookup\n  const singleColorScale = useMemo(() => {\n    // Use the active *array* index for accessing data\n    const activeArrayIndex = featureIdToArrayIndexMap.get(\n      coloringFeatureIndex ?? -1\n    );\n    if (activeArrayIndex === undefined || !featureActivations[0]) {\n      return () => styles.container.backgroundColor || \"#ffffff\";\n    }\n    const actsForFeature = featureActivations.map(\n      (tokenActs) => tokenActs[activeArrayIndex] ?? 0 // Use array index\n    );\n    const calculatedMin = Math.min(...actsForFeature);\n    const calculatedMax = Math.max(...actsForFeature);\n    const domainMinRaw =\n      minColorBound !== null && minColorBound !== \"\"\n        ? parseFloat(minColorBound as string)\n        : calculatedMin;\n    const domainMaxRaw =\n      maxColorBound !== null && maxColorBound !== \"\"\n        ? parseFloat(maxColorBound as string)\n        : calculatedMax;\n    const domainMin = Number.isNaN(domainMinRaw) ? calculatedMin : domainMinRaw;\n    const domainMax = Number.isNaN(domainMaxRaw) ? calculatedMax : domainMaxRaw;\n    const userColorMapKey = selectedColorMap.toLowerCase();\n\n    // Handle Claude mode specific color map and potential override\n    let effectiveMapKey = userColorMapKey;\n    if (claudeModeActive) {\n      effectiveMapKey = \"claudeOranges\"; // Force Claude map if mode is active\n    }\n    const effectiveInterpolator =\n      d3ColorMapLookup[effectiveMapKey] ?? d3ColorMapLookup.reds;\n\n    if (!d3ColorMapLookup[effectiveMapKey]) {\n      console.warn(`Color map \"${effectiveMapKey}\" not supported, using Reds.`);\n    }\n    const isDiverging = divergingColorMapKeys.includes(effectiveMapKey);\n\n    if (isDiverging) {\n      // Use scaleDiverging for midpoint control\n      let midpoint = (domainMin + domainMax) / 2; // Default midpoint\n      if (colorMidpoint !== null && colorMidpoint !== \"\") {\n        const parsedMidpoint = parseFloat(colorMidpoint as string);\n        if (!Number.isNaN(parsedMidpoint)) {\n          midpoint = parsedMidpoint;\n        }\n      }\n      // Ensure domain is [min, mid, max] even if min/max/mid are same\n      const finalDomain: [number, number, number] = [\n        domainMin === midpoint && domainMin === domainMax\n          ? domainMin - 0.001\n          : domainMin,\n        midpoint,\n        domainMax === midpoint && domainMax === domainMin\n          ? domainMax + 0.001\n          : domainMax\n      ];\n\n      return createColorScale(effectiveInterpolator, finalDomain, {\n        isDiverging: true\n      });\n    }\n\n    const effectiveMin = domainMin === domainMax ? domainMin : domainMin; // Offset for zero range\n    const effectiveMax = domainMin === domainMax ? domainMax + 1e-5 : domainMax; // Offset for zero range\n\n    return createColorScale(\n      effectiveInterpolator,\n      [effectiveMin, effectiveMax],\n      {\n        minClamp: 0,\n        maxClamp: 0.7,\n        isDiverging: false\n      }\n    );\n  }, [\n    coloringFeatureIndex,\n    selectedColorMap,\n    minColorBound,\n    maxColorBound,\n    colorMidpoint,\n    featureActivations,\n    styles.container.backgroundColor,\n    claudeModeActive,\n    featureIdToArrayIndexMap\n  ]);\n\n  // UPDATED: Use selectedColorMap state and clamp interpolators from lookup\n  const featureScales = useMemo(() => {\n    const scales: { [key: number]: (t: number) => string } = {};\n    // Iterate based on array indices (0 to numFeatures-1)\n    if (!featureActivations[0]) return scales;\n    const numFeatures = featureActivations[0].length;\n    const userColorMapKey = selectedColorMap.toLowerCase();\n    const effectiveInterpolator =\n      d3ColorMapLookup[userColorMapKey] ?? d3ColorMapLookup.reds;\n    const isDiverging = divergingColorMapKeys.includes(userColorMapKey);\n\n    // Create scales for each ARRAY INDEX\n    for (let arrayIndex = 0; arrayIndex < numFeatures; arrayIndex++) {\n      const acts = featureActivations.map(\n        (tokenActs) => tokenActs[arrayIndex] ?? 0\n      ); // Use arrayIndex\n      const minAct = Math.min(...acts);\n      const maxAct = Math.max(...acts);\n      // Use bounds if provided, otherwise use calculated min/max for this feature\n      const domainMinRaw =\n        minColorBound !== null && minColorBound !== \"\"\n          ? parseFloat(minColorBound as string)\n          : minAct;\n      const domainMaxRaw =\n        maxColorBound !== null && maxColorBound !== \"\"\n          ? parseFloat(maxColorBound as string)\n          : maxAct;\n      const domainMin = Number.isNaN(domainMinRaw) ? minAct : domainMinRaw;\n      const domainMax = Number.isNaN(domainMaxRaw) ? maxAct : domainMaxRaw;\n\n      if (isDiverging) {\n        // Use scaleDiverging for midpoint control\n        let midpoint = (domainMin + domainMax) / 2; // Default midpoint\n        if (colorMidpoint !== null && colorMidpoint !== \"\") {\n          const parsedMidpoint = parseFloat(colorMidpoint as string);\n          if (!Number.isNaN(parsedMidpoint)) {\n            midpoint = parsedMidpoint;\n          }\n        }\n        const finalDomain: [number, number, number] = [\n          domainMin === midpoint && domainMin === domainMax\n            ? domainMin - 0.001\n            : domainMin,\n          midpoint,\n          domainMax === midpoint && domainMax === domainMin\n            ? domainMax + 0.001\n            : domainMax\n        ];\n        // Store scale by array index\n        scales[arrayIndex] = createColorScale(\n          effectiveInterpolator,\n          finalDomain,\n          {\n            isDiverging: true\n          }\n        );\n      } else {\n        const effectiveMin = domainMin === domainMax ? domainMin : domainMin;\n        const effectiveMax =\n          domainMin === domainMax ? domainMax + 1e-5 : domainMax;\n        // Store scale by array index\n        scales[arrayIndex] = createColorScale(\n          effectiveInterpolator,\n          [effectiveMin, effectiveMax],\n          {\n            minClamp: 0,\n            maxClamp: 0.7,\n            isDiverging: false\n          }\n        );\n      }\n    }\n    return scales;\n  }, [\n    featureActivations,\n    selectedColorMap,\n    minColorBound,\n    maxColorBound,\n    colorMidpoint,\n    d3ColorMapLookup, // Add dependencies\n    divergingColorMapKeys,\n    createColorScale // Add dependencies\n    // featureIdToArrayIndexMap is NOT needed here as we iterate by array index\n  ]);\n\n  // --- Event Handlers ---\n\n  const handleFeatureMouseEnter = useCallback(\n    (index: number, event: React.MouseEvent) => {\n      setHoveredFeatureIndex(index);\n\n      if (isCompactView) {\n        const feature = rankedFeatures.find((f) => f.index === index);\n        if (\n          feature &&\n          (!focusedFeatureInfo ||\n            !focusedFeatureInfo.isClick ||\n            focusedFeatureInfo.index !== index)\n        ) {\n          const containerRect = containerRef.current?.getBoundingClientRect();\n          const position = {\n            x: event.clientX - (containerRect?.left ?? 0) + 15,\n            y: event.clientY - (containerRect?.top ?? 0) + 15\n          };\n          setFocusedFeatureInfo({ ...feature, isClick: false, position });\n        }\n      }\n    },\n    [isCompactView, rankedFeatures, focusedFeatureInfo, containerRef]\n  );\n\n  const handleFeatureMouseLeave = useCallback(() => {\n    setHoveredFeatureIndex(null);\n\n    if (isCompactView && focusedFeatureInfo && !focusedFeatureInfo.isClick) {\n      setFocusedFeatureInfo(null);\n    }\n  }, [isCompactView, focusedFeatureInfo]);\n\n  const handleFeatureClick = useCallback(\n    (index: number, event: React.MouseEvent) => {\n      // Toggle in multi-select list\n      setSelectedFeatureIndices((prev) =>\n        prev.includes(index)\n          ? prev.filter((i) => i !== index)\n          : [...prev, index]\n      );\n\n      // Update single selected index ONLY if multi-select is becoming empty or just starting\n      // This allows single-feature coloring when only one feature is selected\n      setSelectedFeatureIndices((currentSelected) => {\n        if (currentSelected.length === 1) {\n          setSelectedFeatureIndex(currentSelected[0]);\n        } else {\n          setSelectedFeatureIndex(null); // Use multi-color logic if > 1 or 0 selected\n        }\n        return currentSelected; // Return current state for chaining\n      });\n\n      if (isCompactView) {\n        const feature = rankedFeatures.find((f) => f.index === index);\n        if (!feature) return;\n\n        if (focusedFeatureInfo?.index === index && focusedFeatureInfo.isClick) {\n          setFocusedFeatureInfo(null);\n        } else {\n          const containerRect = containerRef.current?.getBoundingClientRect();\n          const position = {\n            x: event.clientX - (containerRect?.left ?? 0) + 15,\n            y: event.clientY - (containerRect?.top ?? 0) + 15\n          };\n          setFocusedFeatureInfo({ ...feature, isClick: true, position });\n        }\n      }\n    },\n    [isCompactView, rankedFeatures, focusedFeatureInfo, containerRef]\n  );\n\n  const handleTokenMouseEnter = useCallback(\n    (index: number, event: React.MouseEvent) => {\n      setHoveredTokenIndex(index);\n\n      if (selectedTokenIndices.includes(index)) {\n        // Don't hide tooltip for selected tokens\n        // Instead, show the tooltip with current values\n        const topFeatures = getTopFeaturesForToken(\n          index,\n          featureActivations,\n          featureLabels,\n          featureIDs,\n          numTokenToShow,\n          currentThreshold\n        );\n\n        // Get array index for selected feature to fetch correct activation\n        const selectedArrayIndex = featureIdToArrayIndexMap.get(\n          selectedFeatureIndex ?? -1\n        );\n        const currentSelectedFeatureActivationValue =\n          selectedArrayIndex !== undefined\n            ? featureActivations[index]?.[selectedArrayIndex] ?? null\n            : null;\n\n        // Calculate position relative to containerRef\n        const containerRect = containerRef.current?.getBoundingClientRect();\n        const scrollLeft = containerRef.current?.scrollLeft ?? 0;\n        const scrollTop = containerRef.current?.scrollTop ?? 0;\n        const position = {\n          x: event.clientX - (containerRect?.left ?? 0) + scrollLeft + 15,\n          y: event.clientY - (containerRect?.top ?? 0) + scrollTop + 15\n        };\n\n        setHoverTokenTooltipData({\n          tokenIndex: index,\n          topFeatures,\n          selectedFeatureValue: currentSelectedFeatureActivationValue,\n          position\n        });\n        return;\n      }\n\n      // Original code for non-selected tokens\n      const topFeatures = getTopFeaturesForToken(\n        index,\n        featureActivations,\n        featureLabels,\n        featureIDs,\n        numTokenToShow,\n        currentThreshold\n      );\n      // Get array index for selected feature to fetch correct activation\n      const selectedArrayIndex = featureIdToArrayIndexMap.get(\n        selectedFeatureIndex ?? -1\n      );\n      const currentSelectedFeatureActivationValue =\n        selectedArrayIndex !== undefined\n          ? featureActivations[index]?.[selectedArrayIndex] ?? null\n          : null;\n\n      // Calculate position relative to containerRef\n      const containerRect = containerRef.current?.getBoundingClientRect();\n      const scrollLeft = containerRef.current?.scrollLeft ?? 0;\n      const scrollTop = containerRef.current?.scrollTop ?? 0;\n      const position = {\n        x: event.clientX - (containerRect?.left ?? 0) + scrollLeft + 15,\n        y: event.clientY - (containerRect?.top ?? 0) + scrollTop + 15\n      };\n\n      setHoverTokenTooltipData({\n        tokenIndex: index,\n        topFeatures,\n        selectedFeatureValue: currentSelectedFeatureActivationValue,\n        position\n      });\n    },\n    [\n      featureActivations,\n      featureLabels,\n      featureIDs,\n      numTokenToShow,\n      currentThreshold,\n      selectedFeatureIndex,\n      selectedTokenIndices,\n      featureIdToArrayIndexMap\n    ]\n  );\n\n  const handleTokenMouseLeave = useCallback(() => {\n    setHoveredTokenIndex(null);\n    setHoverTokenTooltipData(null);\n  }, []);\n\n  const handleTokenClick = useCallback((index: number) => {\n    setSelectedTokenIndices((prevSelected) => {\n      if (prevSelected.includes(index)) {\n        return prevSelected.filter((i) => i !== index);\n      }\n      return [...prevSelected, index];\n    });\n    setHoverTokenTooltipData(null);\n  }, []);\n\n  const handleTokenTooltipFeatureClick = (featureIndex: number) => {\n    // Add to multi-select list (toggle behavior)\n    setSelectedFeatureIndices((prev) =>\n      prev.includes(featureIndex)\n        ? prev.filter((i) => i !== featureIndex)\n        : [...prev, featureIndex]\n    );\n\n    // Update single selected index based on multi-select state\n    setSelectedFeatureIndices((currentSelected) => {\n      if (currentSelected.length === 1) {\n        setSelectedFeatureIndex(currentSelected[0]);\n      } else {\n        setSelectedFeatureIndex(null); // Use multi-color logic if > 1 or 0 selected\n      }\n      return currentSelected; // Return current state for chaining\n    });\n\n    // Keep compact view tooltip logic\n    if (isCompactView && focusedFeatureInfo?.isClick) {\n      const feature = rankedFeatures.find((f) => f.index === featureIndex);\n      if (feature) {\n        setFocusedFeatureInfo({\n          ...feature,\n          isClick: true,\n          position: focusedFeatureInfo.position\n        });\n      }\n    }\n  };\n\n  const handleDeselectToken = useCallback((indexToRemove: number) => {\n    setSelectedTokenIndices((prevSelected) =>\n      prevSelected.filter((i) => i !== indexToRemove)\n    );\n    setHoverTokenTooltipData(null);\n  }, []);\n\n  const handleDeselectFeature = useCallback((indexToRemove: number) => {\n    setSelectedFeatureIndices((prevSelected) =>\n      prevSelected.filter((i) => i !== indexToRemove)\n    );\n    setSelectedFeatureIndices((currentSelected) => {\n      if (currentSelected.length === 1) {\n        setSelectedFeatureIndex(currentSelected[0]);\n      } else if (currentSelected.length === 0) {\n        setSelectedFeatureIndex(null);\n      }\n      return currentSelected;\n    });\n  }, []);\n\n  const closeFeatureInfoTooltip = useCallback(() => {\n    setFocusedFeatureInfo(null);\n  }, []);\n\n  const handleBoundInputChange = (\n    setter: React.Dispatch<React.SetStateAction<number | string | null>>,\n    value: string\n  ) => {\n    if (value === \"\" || value === \"-\" || !Number.isNaN(parseFloat(value))) {\n      setter(value);\n    }\n  };\n\n  const handleResetAll = useCallback(() => {\n    setMinColorBound(null);\n    setMaxColorBound(null);\n    setSelectedFeatureIndex(null);\n    setSelectedTokenIndices([]);\n    setFocusedFeatureInfo(null);\n    setHoverTokenTooltipData(null);\n    setSelectedFeatureIndices([]);\n    setHoveredTokenIndex(null);\n    setMultiColorTokens(false);\n    setSelectedColorMap(colorMap);\n    setShowTokenFeatures(false);\n    setColorMode(\"claude-brown\");\n    setClaudeModeActive(true);\n    setColorMidpoint(propsColorMidpoint ?? null);\n  }, [colorMap, propsColorMidpoint]);\n\n  const toggleCompactView = useCallback(() => {\n    setIsCompactView((prev) => !prev);\n    setFocusedFeatureInfo(null);\n    setHoveredFeatureIndex(null);\n  }, []);\n\n  const toggleFeatureListHeight = useCallback(() => {\n    setFeatureListHeight((prev) => (prev === \"200px\" ? \"500px\" : \"200px\"));\n  }, []);\n\n  const handleMultiColorChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      setMultiColorTokens(event.target.checked);\n    },\n    []\n  );\n\n  const toggleColorMode = useCallback(() => {\n    setColorMode((prev) => (prev === \"light\" ? \"dark\" : \"light\"));\n    setClaudeModeActive(false);\n  }, []);\n\n  const activateClaudeMode = useCallback(() => {\n    setColorMode(\"claude-brown\");\n    setSelectedColorMap(\"claudeOranges\");\n    setClaudeModeActive(true);\n  }, []);\n\n  const toggleShowTokenFeatures = useCallback(() => {\n    setShowTokenFeatures((prev) => !prev);\n  }, []);\n\n  // Filtered list of colormaps for the dropdown (exclude Claude's special one)\n  const dropdownColorMaps = useMemo(() => {\n    return Object.keys(d3ColorMapLookup).filter(\n      (name) => name !== \"claudeOranges\"\n    );\n  }, []);\n\n  // Updated handler for selected features list height toggle\n  const toggleSelectedFeaturesHeight = useCallback(() => {\n    setSelectedFeaturesHeight((prev) => (prev === \"200px\" ? \"500px\" : \"200px\"));\n  }, []);\n\n  const toggleSelectedTokensHeight = useCallback(() => {\n    setSelectedTokensHeight((prev) => (prev === \"200px\" ? \"500px\" : \"200px\"));\n  }, []);\n\n  // --- Helper Functions (Component-specific) ---\n\n  // Get the feature activation value for a specific token and feature ID\n  const getFeatureActivationValue = useCallback(\n    (featId: number | null, tokIdx: number): string => {\n      if (featId === null) return \"N/A\";\n      const arrayIndex = featureIdToArrayIndexMap.get(featId);\n      if (arrayIndex === undefined) return \"N/A\";\n      const value = featureActivations[tokIdx]?.[arrayIndex] ?? 0;\n      return value.toPrecision(3);\n    },\n    [featureIdToArrayIndexMap, featureActivations]\n  );\n\n  // Get the background color for a feature activation\n  const getFeatureActivationColor = useCallback(\n    (featId: number | null, tokIdx: number): string => {\n      if (featId === null) return theme.bg;\n      const arrayIndex = featureIdToArrayIndexMap.get(featId);\n      if (arrayIndex === undefined) return theme.bg;\n      const value = featureActivations[tokIdx]?.[arrayIndex] ?? 0;\n      const scale = featureScales[arrayIndex];\n      return scale ? scale(value) : theme.bg;\n    },\n    [featureIdToArrayIndexMap, featureActivations, featureScales, theme.bg]\n  );\n\n  // Get the text color based on background color\n  const getFeatureActivationTextColor = useCallback(\n    (bgColor: string): string => {\n      return getLuminance(bgColor) > 0.5 ? themes.light.text : themes.dark.text;\n    },\n    [themes.light.text, themes.dark.text]\n  );\n\n  // --- Rendering ---\n\n  if (!tokens || !featureActivations) {\n    return <div style={styles.container}>Loading or no data...</div>;\n  }\n\n  const isTokenSelected = (index: number): boolean => {\n    return selectedTokenIndices.includes(index);\n  };\n\n  return (\n    <div style={{ ...styles.container }} ref={containerRef}>\n      {/* --- Controls --- */}\n      <div style={styles.controls}>\n        <div>\n          <label>Rank by: </label>\n          <select\n            value={rankingMetric}\n            onChange={(e) =>\n              setRankingMetric(e.target.value as \"max\" | \"l1\" | \"l0\")\n            }\n          >\n            <option value=\"max\">Max Activation</option>\n            <option value=\"l1\">Mean Abs Activation (L1)</option>\n            <option value=\"l0\">Non-Zero Count (L0)</option>\n          </select>\n        </div>\n        <div>\n          <label>Threshold: </label>\n          <input\n            type=\"number\"\n            step=\"any\"\n            placeholder=\"None\"\n            value={currentThreshold === null ? \"\" : currentThreshold}\n            onChange={(e) =>\n              setCurrentThreshold(\n                e.target.value === \"\" ? null : parseFloat(e.target.value)\n              )\n            }\n            style={{ width: \"60px\" }}\n            title=\"Activation threshold for L0 ranking and token tooltips\"\n          />\n        </div>\n        <div style={styles.inputGroup}>\n          <label>Min Color: </label>\n          <input\n            type=\"number\"\n            step=\"any\"\n            placeholder={calculatedColorBounds.min.toPrecision(3)}\n            value={minColorBound ?? \"\"}\n            onChange={(e) =>\n              handleBoundInputChange(setMinColorBound, e.target.value)\n            }\n            style={{ width: \"60px\" }}\n            title=\"Minimum value for color scale (leave blank for auto)\"\n          />\n        </div>\n        <div style={styles.inputGroup}>\n          <label>Max Color: </label>\n          <input\n            type=\"number\"\n            step=\"any\"\n            placeholder={calculatedColorBounds.max.toPrecision(3)}\n            value={maxColorBound ?? \"\"}\n            onChange={(e) =>\n              handleBoundInputChange(setMaxColorBound, e.target.value)\n            }\n            style={{ width: \"60px\" }}\n            title=\"Maximum value for color scale (leave blank for auto)\"\n          />\n        </div>\n        {/* Conditionally show Midpoint input for diverging maps */}\n        {divergingColorMapKeys.includes(selectedColorMap.toLowerCase()) && (\n          <div style={styles.inputGroup}>\n            <label>Midpoint: </label>\n            <input\n              type=\"number\"\n              step=\"any\"\n              placeholder={`(${\n                (calculatedColorBounds.min + calculatedColorBounds.max) / 2\n              })`}\n              value={colorMidpoint ?? \"\"}\n              onChange={(e) =>\n                handleBoundInputChange(setColorMidpoint, e.target.value)\n              }\n              style={{ width: \"60px\" }}\n              title=\"Midpoint for diverging color scale (leave blank for auto)\"\n            />\n          </div>\n        )}\n        <div style={styles.inputGroup}>\n          <button\n            onClick={handleResetAll}\n            title=\"Reset color bounds, selected features, and selected tokens\"\n          >\n            Reset All\n          </button>\n        </div>\n        <div>\n          <label>Top Overall: </label>\n          <input\n            type=\"number\"\n            min=\"1\"\n            step=\"1\"\n            value={numOverallToShow}\n            onChange={(e) => setNumOverallToShow(parseInt(e.target.value, 10))}\n            style={{ width: \"50px\" }}\n          />\n        </div>\n        <div>\n          <label>Top Per Token: </label>\n          <input\n            type=\"number\"\n            min=\"1\"\n            step=\"1\"\n            value={numTokenToShow}\n            onChange={(e) => setNumTokenToShow(parseInt(e.target.value, 10))}\n            style={{ width: \"50px\" }}\n          />\n        </div>\n        <div style={styles.inputGroup}>\n          <input\n            type=\"checkbox\"\n            id=\"multiColorCheckbox\"\n            checked={multiColorTokens}\n            onChange={handleMultiColorChange}\n            disabled={selectedFeatureIndices.length < 2}\n            title={\n              selectedFeatureIndices.length < 2\n                ? \"Select 2 or more features to enable\"\n                : \"Color tokens based on activations of all selected features\"\n            }\n          />\n          <label htmlFor=\"multiColorCheckbox\">Multi-Color Tokens</label>\n        </div>\n        <div>\n          <label>Color Map: </label>\n          <select\n            value={selectedColorMap}\n            onChange={(e) => {\n              setSelectedColorMap(e.target.value);\n              setClaudeModeActive(false); // Deactivate Claude if map manually changed\n            }}\n            title=\"Select color map for activations\"\n          >\n            {/* Use filtered list for options */}\n            {dropdownColorMaps.map((mapName) => (\n              <option key={mapName} value={mapName}>\n                {mapName}\n              </option>\n            ))}\n          </select>\n        </div>\n        <button\n          onClick={toggleColorMode}\n          title={`Switch to ${colorMode === \"light\" ? \"Dark\" : \"Light\"} Mode`}\n        >\n          {colorMode === \"light\" ? \"Dark Mode\" : \"Light Mode\"}\n        </button>\n        <button\n          onClick={activateClaudeMode}\n          title=\"Activate Claude Mode Theme\"\n          style={{ opacity: 0.7 }}\n        >\n          \u2728\n        </button>\n        {/* Moved Compact View Button Here */}\n        <button\n          onClick={toggleCompactView}\n          style={{ ...styles.compactButton, marginLeft: \"auto\" }} // Use marginLeft: auto to push left\n          title={isCompactView ? \"Show Full Labels\" : \"Show Compact View\"}\n        >\n          {isCompactView ? \"Expand View\" : \"Compact View\"}\n        </button>\n      </div>\n\n      {/* --- Feature Search & List Controls --- */}\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"flex-start\", // Align items to the start now\n          alignItems: \"center\",\n          marginBottom: \"5px\",\n          flexWrap: \"wrap\",\n          gap: \"10px\"\n        }}\n      >\n        <div style={{ ...styles.featureSearch, marginRight: \"auto\" }}>\n          {\" \"}\n          {/* Push button right */}\n          <label>Search Features: </label>\n          <input\n            type=\"text\"\n            placeholder=\"Index or Label...\"\n            value={featureSearchTerm}\n            onChange={(e) => setFeatureSearchTerm(e.target.value)}\n            style={{ width: \"200px\", padding: \"4px\" }}\n          />\n        </div>\n        {/* Expand List button on the right */}\n        <div\n          style={{\n            display: \"flex\",\n            gap: \"5px\",\n            alignItems: \"center\",\n            marginLeft: \"10px\"\n          }}\n        >\n          <button\n            onClick={toggleFeatureListHeight}\n            style={styles.compactButton}\n            title={\n              featureListHeight === \"200px\"\n                ? \"Expand Feature List\"\n                : \"Collapse Feature List\"\n            }\n          >\n            {featureListHeight === \"200px\" ? \"Expand\" : \"Collapse\"}\n          </button>\n        </div>\n      </div>\n\n      {/* --- Overall Feature List (Conditionally Rendered) --- */}\n      <div\n        style={{ ...styles.featureListContainer, maxHeight: featureListHeight }}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"baseline\",\n            paddingRight: \"8px\",\n            paddingTop: \"10px\",\n            paddingLeft: \"5px\", // Increased left padding\n            paddingBottom: \"10px\",\n            position: \"sticky\",\n            top: 0,\n            backgroundColor: theme.containerBg,\n            zIndex: 5, // Increased z-index\n            boxShadow: \"0 2px 4px rgba(0,0,0,0.05)\", // Added shadow\n            isolation: \"isolate\", // Create a new stacking context\n            backdropFilter: \"blur(2px)\" // Add blur effect\n          }}\n        >\n          <strong>\n            Top {topFilteredAndRankedFeatures.length} Features (\n            {filteredAndRankedFeatures.length} Total) (Ranked by{\" \"}\n            {getRankingMetricDisplayName(rankingMetric)}\n            {featureSearchTerm ? \", Filtered\" : \"\"}):\n          </strong>\n          {!isCompactView && (\n            <span\n              style={{\n                fontSize: \"0.8em\",\n                color: theme.dimText,\n                whiteSpace: \"nowrap\"\n              }}\n            >\n              Value {/* Score: {scoreMetricDescription} */}\n            </span>\n          )}\n        </div>\n        {isCompactView ? (\n          <div style={styles.featureGrid}>\n            {topFilteredAndRankedFeatures.map((feature) => {\n              const featureTitle = `Index: ${\n                feature.index\n              }\\nMax: ${feature.maxActivation.toFixed(\n                3\n              )}, L1: ${feature.meanAbsActivation.toFixed(3)}, L0: ${\n                feature.nonZeroCount\n              }\\n${feature.label}`;\n              const isSelected = selectedFeatureIndices.includes(feature.index);\n              const isHovered = hoveredFeatureIndex === feature.index;\n\n              return (\n                <div\n                  key={feature.index}\n                  style={{\n                    ...styles.featureTile,\n                    ...(isHovered ? styles.featureTileHover : {}),\n                    ...(isSelected ? styles.featureTileSelected : {})\n                  }}\n                  onMouseEnter={(e) =>\n                    handleFeatureMouseEnter(feature.index, e)\n                  }\n                  onMouseLeave={handleFeatureMouseLeave}\n                  onClick={(e) => handleFeatureClick(feature.index, e)}\n                  title={featureTitle}\n                >\n                  {feature.index} {/* This displays the feature ID directly */}\n                </div>\n              );\n            })}\n          </div>\n        ) : (\n          // Full View (Non-compact)\n          <div>\n            {topFilteredAndRankedFeatures.map((feature) => {\n              // Define variables needed for live value display\n              const hoveredTokenFeatureId = feature.index; // feature.index holds the Feature ID\n              const currentHoveredTokenArrayIndex =\n                hoveredTokenIndex !== null\n                  ? featureIdToArrayIndexMap.get(hoveredTokenFeatureId)\n                  : undefined;\n              const hoveredTokenActivation =\n                hoveredTokenIndex !== null &&\n                currentHoveredTokenArrayIndex !== undefined\n                  ? featureActivations[hoveredTokenIndex]?.[\n                      currentHoveredTokenArrayIndex\n                    ] ?? 0\n                  : null;\n              const featureArrayIndex = featureIdToArrayIndexMap.get(\n                feature.index\n              );\n              const scale =\n                featureArrayIndex !== undefined && featureScales\n                  ? featureScales[featureArrayIndex]\n                  : null;\n              const indicatorColor =\n                hoveredTokenActivation !== null && scale\n                  ? scale(hoveredTokenActivation)\n                  : theme.bg;\n              let indicatorTextColor = theme.text;\n              if (hoveredTokenActivation !== null) {\n                indicatorTextColor =\n                  getLuminance(indicatorColor) > 0.5\n                    ? themes.light.text\n                    : themes.dark.text;\n              }\n              const displayValue =\n                hoveredTokenActivation?.toPrecision(3) ?? \"N/A\";\n              const valueTitle =\n                hoveredTokenActivation !== null\n                  ? `Activation at Token ${hoveredTokenIndex}: ${hoveredTokenActivation.toPrecision(\n                      4\n                    )}`\n                  : \"Hover over a token to see value\";\n\n              return (\n                <div\n                  key={feature.index}\n                  style={{\n                    ...styles.featureListItem,\n                    ...(hoveredFeatureIndex === feature.index\n                      ? styles.featureListItemHover\n                      : {}),\n                    ...(selectedFeatureIndices.includes(feature.index)\n                      ? styles.featureListItemSelected\n                      : {})\n                  }}\n                  onMouseEnter={(e) =>\n                    handleFeatureMouseEnter(feature.index, e)\n                  }\n                  onMouseLeave={handleFeatureMouseLeave}\n                  onClick={(e) => handleFeatureClick(feature.index, e)}\n                  title={`Feature ${feature.index}: ${\n                    feature.label\n                  }\\nMax: ${feature.maxActivation.toPrecision(\n                    3\n                  )}, L1: ${feature.meanAbsActivation.toPrecision(3)}, L0: ${\n                    feature.nonZeroCount\n                  }`}\n                >\n                  {/* Left Side: Feature index/label + stats */}\n                  <span\n                    style={{\n                      overflow: \"hidden\",\n                      textOverflow: \"ellipsis\",\n                      whiteSpace: \"nowrap\",\n                      marginRight: \"10px\"\n                    }}\n                  >\n                    <strong>Feature {feature.index}:</strong> {feature.label}\n                    <span\n                      style={{\n                        fontSize: \"0.85em\",\n                        color: styles.featureScore.color,\n                        marginLeft: \"5px\"\n                      }}\n                    >\n                      (Max: {feature.maxActivation.toPrecision(3)}, L1:{\" \"}\n                      {feature.meanAbsActivation.toPrecision(3)}, L0:{\" \"}\n                      {feature.nonZeroCount})\n                    </span>\n                  </span>\n                  {/* Right Side: Live activation value */}\n                  <div\n                    style={{\n                      display: \"flex\", // Keep flex for alignment\n                      alignItems: \"center\",\n                      marginLeft: \"auto\",\n                      flexShrink: 0\n                    }}\n                  >\n                    {/* Value Indicator - Shows value at hovered token */}\n                    <span\n                      style={{\n                        ...styles.featureValueIndicator,\n                        backgroundColor: indicatorColor,\n                        color: indicatorTextColor\n                      }}\n                      title={valueTitle}\n                    >\n                      {displayValue}\n                    </span>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n        {filteredAndRankedFeatures.length > numOverallToShow && (\n          <div\n            style={{\n              textAlign: \"center\",\n              padding: \"5px\",\n              fontSize: \"0.8em\",\n              color: \"#555\"\n            }}\n          >\n            Showing {numOverallToShow} of {filteredAndRankedFeatures.length}{\" \"}\n            features.\n          </div>\n        )}\n        {filteredAndRankedFeatures.length === 0 && featureSearchTerm && (\n          <div\n            style={{\n              textAlign: \"center\",\n              padding: \"5px\",\n              fontSize: \"0.9em\",\n              color: \"#777\"\n            }}\n          >\n            No features match search term.\n          </div>\n        )}\n      </div>\n\n      {/* --- NEW: Persistent Selected Features Area --- */}\n      {selectedFeaturesData.length > 0 && (\n        <div\n          style={{\n            ...styles.selectedFeaturesContainer,\n            maxHeight: selectedFeaturesHeight,\n            position: \"relative\" // Ensure relative positioning\n          }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n              marginBottom: \"5px\",\n              position: \"sticky\",\n              top: 0,\n              backgroundColor: theme.containerBg,\n              zIndex: 5,\n              paddingBottom: \"3px\",\n              paddingTop: \"3px\",\n              borderBottom: `1px solid ${theme.subtleBorder}`,\n              width: \"100%\",\n              boxShadow: \"0 2px 4px rgba(0,0,0,0.05)\",\n              isolation: \"isolate\" // Create a new stacking context to prevent content showing through\n            }}\n          >\n            <strong>Selected Features:</strong>\n            <button\n              onClick={toggleSelectedFeaturesHeight}\n              style={styles.compactButton}\n              title={\n                selectedFeaturesHeight === \"200px\"\n                  ? \"Expand Selected Features\"\n                  : \"Collapse Selected Features\"\n              }\n            >\n              {selectedFeaturesHeight === \"200px\" ? \"Expand\" : \"Collapse\"}\n            </button>\n          </div>\n          <div style={{ paddingTop: \"10px\" }}>\n            {\" \"}\n            {/* Add space for header */}\n            {/* Map over selected features */}\n            {selectedFeaturesData.map((feature) => {\n              // Define variables within map scope\n              const arrayIndex = featureIdToArrayIndexMap.get(feature.index);\n              const hoveredTokenActivation =\n                hoveredTokenIndex !== null && arrayIndex !== undefined\n                  ? featureActivations[hoveredTokenIndex]?.[arrayIndex] ?? 0\n                  : null;\n              const scale =\n                arrayIndex !== undefined && featureScales\n                  ? featureScales[arrayIndex]\n                  : null;\n              const indicatorColor =\n                hoveredTokenActivation !== null && scale\n                  ? scale(hoveredTokenActivation)\n                  : theme.bg;\n              let indicatorTextColor = theme.text;\n              if (hoveredTokenActivation !== null) {\n                indicatorTextColor =\n                  getLuminance(indicatorColor) > 0.5\n                    ? themes.light.text\n                    : themes.dark.text;\n              }\n              const displayValue =\n                hoveredTokenActivation?.toPrecision(3) ?? \"N/A\";\n              const isHoverTarget =\n                hoveredTokenIndex !== null &&\n                arrayIndex !== undefined &&\n                featureActivations[hoveredTokenIndex]?.[arrayIndex] !==\n                  undefined;\n\n              // --- Compact View for Selected Feature --- //\n              if (isCompactView) {\n                return (\n                  <div\n                    key={feature.index}\n                    // Add hover handlers\n                    onMouseEnter={() => setHoveredFeatureIndex(feature.index)}\n                    onMouseLeave={() => setHoveredFeatureIndex(null)}\n                    style={{\n                      ...styles.selectedFeatureInfoBox,\n                      display: \"flex\",\n                      justifyContent: \"space-between\",\n                      alignItems: \"center\",\n                      padding: \"4px 8px\"\n                    }}\n                  >\n                    {/* Left side: Feature Info + Stats */}\n                    <span\n                      style={{\n                        overflow: \"hidden\",\n                        textOverflow: \"ellipsis\",\n                        whiteSpace: \"nowrap\",\n                        marginRight: \"10px\"\n                      }}\n                      title={feature.label}\n                    >\n                      <strong>Feature {feature.index}:</strong> {feature.label}\n                      {/* Add stats in compact view */}\n                      <span\n                        style={{\n                          fontSize: \"0.85em\",\n                          color: styles.featureScore.color,\n                          marginLeft: \"5px\",\n                          whiteSpace: \"nowrap\" // Prevent wrapping of stats\n                        }}\n                        title={`Max: ${feature.maxActivation.toPrecision(\n                          3\n                        )}, L1: ${feature.meanAbsActivation.toPrecision(\n                          3\n                        )}, L0: ${feature.nonZeroCount}`}\n                      >\n                        (Max: {feature.maxActivation.toPrecision(3)}, L1:{\" \"}\n                        {feature.meanAbsActivation.toPrecision(3)}, L0:{\" \"}\n                        {feature.nonZeroCount})\n                      </span>\n                    </span>\n\n                    {/* Right side: Value + Close Button */}\n                    <div\n                      style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        gap: \"5px\",\n                        marginLeft: \"auto\",\n                        flexShrink: 0\n                      }}\n                    >\n                      {/* Value Indicator - Re-added */}\n                      <span\n                        style={{\n                          ...styles.featureValueIndicator,\n                          backgroundColor: indicatorColor,\n                          color: indicatorTextColor\n                        }}\n                        title={`Activation at hovered token: ${displayValue}`}\n                      >\n                        {displayValue}\n                      </span>\n                      {/* Close Button */}\n                      <button\n                        onClick={() => handleDeselectFeature(feature.index)}\n                        style={{\n                          ...styles.selectedItemCloseButton,\n                          position: \"static\",\n                          fontSize: \"1.1em\",\n                          padding: \"0 3px\"\n                        }}\n                        title=\"Deselect Feature\"\n                      >\n                        \u00D7\n                      </button>\n                    </div>\n                  </div>\n                );\n              }\n\n              // --- Full View for Selected Feature --- //\n              const fullViewBoxStyle = {\n                backgroundColor: isHoverTarget ? theme.boxHoverBg : theme.bg\n              };\n              return (\n                <div\n                  key={feature.index}\n                  style={{\n                    ...styles.selectedFeatureInfoBox,\n                    ...fullViewBoxStyle\n                  }}\n                  // Add hover handlers\n                  onMouseEnter={() => setHoveredFeatureIndex(feature.index)}\n                  onMouseLeave={() => setHoveredFeatureIndex(null)}\n                >\n                  <button\n                    onClick={() => handleDeselectFeature(feature.index)}\n                    style={styles.selectedItemCloseButton}\n                    title=\"Deselect Feature\"\n                  >\n                    \u00D7\n                  </button>\n                  <div>\n                    <strong>Feature {feature.index}:</strong> {feature.label}\n                    {\" - \"}\n                    <span\n                      style={{\n                        fontSize: \"0.9em\",\n                        color: styles.featureScore.color\n                      }}\n                    >\n                      (Max: {feature.maxActivation.toPrecision(3)}, L1:{\" \"}\n                      {feature.meanAbsActivation.toPrecision(3)}, L0:{\" \"}\n                      {feature.nonZeroCount})\n                    </span>\n                  </div>\n                  <div style={{ marginTop: \"3px\" }}>\n                    <span style={styles.dynamicInfoLabel}>Value at Token </span>\n                    {hoveredTokenIndex !== null ? (\n                      <span style={{ fontWeight: \"bold\" }}>\n                        {tokens[hoveredTokenIndex]}\n                      </span>\n                    ) : (\n                      \"?\"\n                    )}\n                    :\n                    <span\n                      style={{\n                        ...styles.featureValueIndicator,\n                        backgroundColor: indicatorColor,\n                        color: indicatorTextColor\n                      }}\n                      title={`Activation: ${displayValue}`}\n                    >\n                      {displayValue}\n                    </span>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      )}\n\n      {/* --- NEW: Persistent Selected Token Info Area --- */}\n      {selectedTokenIndices.length > 0 && (\n        <div\n          style={{\n            ...styles.selectedTokensContainer,\n            maxHeight: selectedTokensHeight,\n            position: \"relative\", // Ensure relative positioning\n            ...(isCompactView && !showTokenFeatures\n              ? styles.selectedTokensContainerCompactWrap\n              : {})\n          }}\n        >\n          {/* Header with Show/Hide button - always shown, even in compact view */}\n          <div\n            style={{\n              display: \"flex\",\n              gap: \"10px\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n              marginBottom: \"5px\",\n              position: \"sticky\",\n              top: 0,\n              backgroundColor: theme.containerBg,\n              zIndex: 5,\n              paddingBottom: \"3px\",\n              paddingTop: \"3px\",\n              borderBottom: `1px solid ${theme.subtleBorder}`,\n              width: \"100%\",\n              boxShadow: \"0 2px 4px rgba(0,0,0,0.05)\",\n              isolation: \"isolate\", // Create a new stacking context\n              backdropFilter: \"blur(2px)\" // Add blur effect for content behind\n            }}\n          >\n            <strong>Selected Tokens:</strong>\n            <div style={{ display: \"flex\", gap: \"5px\" }}>\n              {/* Only show the show/hide features button if not in compact tile view */}\n              {!(isCompactView && !showTokenFeatures) && (\n                <button\n                  onClick={toggleShowTokenFeatures}\n                  style={styles.compactButton}\n                  title={\n                    showTokenFeatures\n                      ? \"Hide Top Features list\"\n                      : \"Show Top Features list\"\n                  }\n                >\n                  {showTokenFeatures\n                    ? \"Hide Top Features\"\n                    : \"Show Top Features\"}\n                </button>\n              )}\n              {/* Expand button for Selected Tokens - always shown */}\n              <button\n                onClick={toggleSelectedTokensHeight}\n                style={styles.compactButton}\n                title={\n                  selectedTokensHeight === \"200px\"\n                    ? \"Expand Selected Tokens\"\n                    : \"Collapse Selected Tokens\"\n                }\n              >\n                {selectedTokensHeight === \"200px\" ? \"Expand\" : \"Collapse\"}\n              </button>\n            </div>\n          </div>\n          <div style={{ paddingTop: \"10px\" }}>\n            {\" \"}\n            {/* Add space for header */}\n            {selectedTokenIndices.map((tokenIndex) => {\n              // --- Determine value/color based on SELECTED feature for this token --- //\n              const selectedDisplayID = selectedFeatureIndex; // The ID shown in the UI\n              const selectedArrayIndex =\n                selectedDisplayID !== null\n                  ? featureIdToArrayIndexMap.get(selectedDisplayID)\n                  : undefined;\n\n              let valueOfSelectedFeatureAtToken: number | null = null;\n              if (\n                selectedArrayIndex !== undefined &&\n                tokenIndex < featureActivations.length\n              ) {\n                valueOfSelectedFeatureAtToken =\n                  featureActivations[tokenIndex]?.[selectedArrayIndex] ?? 0; // Use 0 as default\n              } else if (selectedDisplayID !== null) {\n                // Only warn if a feature was selected but we couldn't find its array index\n                console.warn(\n                  `[SaeVis] Could not find array index for selected feature ID: ${selectedDisplayID}.`\n                );\n                valueOfSelectedFeatureAtToken = null; // Set to null if mapping failed\n              }\n\n              const scaleSelected =\n                selectedArrayIndex !== undefined && featureScales // Ensure featureScales is defined\n                  ? featureScales[selectedArrayIndex]\n                  : null;\n              const indicatorColorSelected =\n                valueOfSelectedFeatureAtToken !== null && scaleSelected\n                  ? scaleSelected(valueOfSelectedFeatureAtToken)\n                  : theme.bg;\n              let indicatorTextColorSelected = theme.text;\n              if (valueOfSelectedFeatureAtToken !== null) {\n                indicatorTextColorSelected =\n                  getLuminance(indicatorColorSelected) > 0.5\n                    ? themes.light.text\n                    : themes.dark.text;\n              }\n              // Display N/A if we couldn't get a value (e.g., map failed or no feature selected)\n              const displayValueSelected =\n                valueOfSelectedFeatureAtToken !== null\n                  ? valueOfSelectedFeatureAtToken.toPrecision(3)\n                  : \"N/A\";\n\n              // --- Determine background highlight based on HOVERED feature --- //\n              const hoveredFeatureArrayIndex = featureIdToArrayIndexMap.get(\n                hoveredFeatureIndex ?? -1\n              );\n              const isHoverTarget =\n                hoveredFeatureArrayIndex !== undefined &&\n                featureActivations[tokenIndex]?.[hoveredFeatureArrayIndex] !==\n                  undefined;\n              const boxStyle = {\n                ...styles.selectedTokenInfoBox,\n                backgroundColor: isHoverTarget ? theme.boxHoverBg : theme.bg\n              };\n\n              // --- Compact TILING View for Selected Token --- //\n              if (isCompactView && !showTokenFeatures) {\n                return (\n                  <div\n                    key={tokenIndex}\n                    style={styles.selectedTokenInfoBoxCompactTile}\n                  >\n                    <span>\n                      <strong>T{tokenIndex}:</strong> &quot;\n                      {tokens[tokenIndex].substring(0, 10)}&quot;\n                      {tokens[tokenIndex].length > 10 ? \"...\" : \"\"}\n                    </span>\n\n                    {/* Replace nested ternary with simpler conditionals */}\n                    {hoveredFeatureIndex !== null && (\n                      <span\n                        style={{\n                          ...styles.featureValueIndicator,\n                          padding: \"0 2px\",\n                          height: \"1.3em\",\n                          minWidth: \"2em\",\n                          fontSize: \"0.8em\",\n                          backgroundColor: getFeatureActivationColor(\n                            hoveredFeatureIndex,\n                            tokenIndex\n                          ),\n                          color: getFeatureActivationTextColor(\n                            getFeatureActivationColor(\n                              hoveredFeatureIndex,\n                              tokenIndex\n                            )\n                          )\n                        }}\n                        title={`Feature ${hoveredFeatureIndex}: ${getFeatureActivationValue(\n                          hoveredFeatureIndex,\n                          tokenIndex\n                        )}`}\n                      >\n                        {getFeatureActivationValue(\n                          hoveredFeatureIndex,\n                          tokenIndex\n                        )}\n                      </span>\n                    )}\n                    {hoveredFeatureIndex === null &&\n                      selectedFeatureIndex !== null && (\n                        <span\n                          style={{\n                            ...styles.featureValueIndicator,\n                            padding: \"0 2px\",\n                            height: \"1.3em\",\n                            minWidth: \"2em\",\n                            fontSize: \"0.8em\",\n                            backgroundColor: indicatorColorSelected,\n                            color: indicatorTextColorSelected\n                          }}\n                          title={`Feature ${\n                            selectedDisplayID ?? \"?\"\n                          }: ${displayValueSelected}`}\n                        >\n                          {displayValueSelected}\n                        </span>\n                      )}\n                    {hoveredFeatureIndex === null &&\n                      selectedFeatureIndex === null && (\n                        <span\n                          style={{\n                            ...styles.featureValueIndicator,\n                            padding: \"0 2px\",\n                            height: \"1.3em\",\n                            minWidth: \"2em\",\n                            fontSize: \"0.8em\"\n                          }}\n                        >\n                          N/A\n                        </span>\n                      )}\n\n                    <button\n                      onClick={() => handleDeselectToken(tokenIndex)}\n                      style={{\n                        ...styles.selectedItemCloseButton,\n                        position: \"static\",\n                        fontSize: \"1em\",\n                        padding: \"0 2px\"\n                      }}\n                      title=\"Deselect Token\"\n                    >\n                      \u00D7\n                    </button>\n                  </div>\n                );\n              }\n\n              // --- Compact SINGLE LINE View for Selected Token --- //\n              if (isCompactView) {\n                return (\n                  <div key={tokenIndex} style={boxStyle}>\n                    <button\n                      onClick={() => handleDeselectToken(tokenIndex)}\n                      style={styles.selectedItemCloseButton}\n                      title=\"Deselect Token\"\n                    >\n                      \u00D7\n                    </button>\n                    <strong>\n                      Token {tokenIndex}: &quot;{tokens[tokenIndex]}&quot;\n                    </strong>\n                    <div\n                      style={{\n                        marginTop: \"5px\",\n                        paddingTop: \"5px\",\n                        borderTop: `1px dashed ${styles.container.borderColor}`\n                      }}\n                    >\n                      {/* Replace nested ternary with simpler conditionals */}\n                      {hoveredFeatureIndex !== null && (\n                        <>\n                          <span style={styles.dynamicInfoLabel}>\n                            Feature {hoveredFeatureIndex}:{\" \"}\n                          </span>\n                          <span\n                            style={{\n                              ...styles.featureValueIndicator,\n                              backgroundColor: getFeatureActivationColor(\n                                hoveredFeatureIndex,\n                                tokenIndex\n                              ),\n                              color: getFeatureActivationTextColor(\n                                getFeatureActivationColor(\n                                  hoveredFeatureIndex,\n                                  tokenIndex\n                                )\n                              )\n                            }}\n                            title={`Value: ${getFeatureActivationValue(\n                              hoveredFeatureIndex,\n                              tokenIndex\n                            )}`}\n                          >\n                            {getFeatureActivationValue(\n                              hoveredFeatureIndex,\n                              tokenIndex\n                            )}\n                          </span>\n                        </>\n                      )}\n                      {hoveredFeatureIndex === null &&\n                        selectedFeatureIndex !== null && (\n                          <>\n                            <span style={styles.dynamicInfoLabel}>\n                              Feature {selectedDisplayID ?? \"?\"}:{\" \"}\n                            </span>\n                            <span\n                              style={{\n                                ...styles.featureValueIndicator,\n                                backgroundColor: indicatorColorSelected,\n                                color: indicatorTextColorSelected\n                              }}\n                              title={`Value: ${displayValueSelected}`}\n                            >\n                              {displayValueSelected}\n                            </span>\n                          </>\n                        )}\n                      {hoveredFeatureIndex === null &&\n                        selectedFeatureIndex === null && (\n                          <span style={styles.dynamicInfoLabel}>\n                            Hover over a feature to see values\n                          </span>\n                        )}\n                    </div>\n                  </div>\n                );\n              }\n\n              // --- Full View for Selected Token --- //\n              return (\n                <div key={tokenIndex} style={boxStyle}>\n                  <button\n                    onClick={() => handleDeselectToken(tokenIndex)}\n                    style={styles.selectedItemCloseButton}\n                    title=\"Deselect Token\"\n                  >\n                    \u00D7\n                  </button>\n                  <strong>\n                    Token {tokenIndex}: &quot;{tokens[tokenIndex]}&quot;\n                  </strong>\n                  <div\n                    style={{\n                      marginTop: \"3px\"\n                    }}\n                  >\n                    {/* Replace nested ternary with simpler conditionals */}\n                    {hoveredFeatureIndex !== null && (\n                      <>\n                        <span style={styles.dynamicInfoLabel}>\n                          Feature {hoveredFeatureIndex}:{\" \"}\n                        </span>\n                        <span\n                          style={{\n                            ...styles.featureValueIndicator,\n                            backgroundColor: getFeatureActivationColor(\n                              hoveredFeatureIndex,\n                              tokenIndex\n                            ),\n                            color: getFeatureActivationTextColor(\n                              getFeatureActivationColor(\n                                hoveredFeatureIndex,\n                                tokenIndex\n                              )\n                            )\n                          }}\n                          title={`Value: ${getFeatureActivationValue(\n                            hoveredFeatureIndex,\n                            tokenIndex\n                          )}`}\n                        >\n                          {getFeatureActivationValue(\n                            hoveredFeatureIndex,\n                            tokenIndex\n                          )}\n                        </span>\n                      </>\n                    )}\n                    {hoveredFeatureIndex === null &&\n                      selectedFeatureIndex !== null && (\n                        <>\n                          <span style={styles.dynamicInfoLabel}>\n                            Feature {selectedDisplayID ?? \"?\"}:{\" \"}\n                          </span>\n                          <span\n                            style={{\n                              ...styles.featureValueIndicator,\n                              backgroundColor: indicatorColorSelected,\n                              color: indicatorTextColorSelected\n                            }}\n                            title={`Value: ${displayValueSelected}`}\n                          >\n                            {displayValueSelected}\n                          </span>\n                        </>\n                      )}\n                    {hoveredFeatureIndex === null &&\n                      selectedFeatureIndex === null && (\n                        <span style={styles.dynamicInfoLabel}>\n                          Hover over a feature to see values\n                        </span>\n                      )}\n                  </div>\n                  {/* Conditionally render Top Features list */}\n                  {showTokenFeatures && (\n                    <div\n                      style={{\n                        marginTop: \"5px\",\n                        paddingTop: \"5px\",\n                        borderTop: `1px dashed ${styles.container.borderColor}`\n                      }}\n                      title={`Showing top ${numTokenToShow} features with abs activation >= ${\n                        currentThreshold ?? 0\n                      }`}\n                    >\n                      <strong>Top Features:</strong>\n                      {getTopFeaturesForToken(\n                        tokenIndex,\n                        featureActivations,\n                        featureLabels,\n                        featureIDs, // Pass correct prop\n                        numTokenToShow,\n                        currentThreshold\n                      ).length === 0 && <div>(None above threshold)</div>}\n                      {/* Corrected map call */}\n                      {getTopFeaturesForToken(\n                        tokenIndex,\n                        featureActivations,\n                        featureLabels,\n                        featureIDs, // Pass correct prop\n                        numTokenToShow,\n                        currentThreshold\n                      ).map((feat) => (\n                        <div key={feat.index}>\n                          <span style={styles.featureListIndexValue}>\n                            {`Feature ${feat.index}: ${feat.activation.toFixed(\n                              3\n                            )}`}\n                          </span>{\" \"}\n                          {/* could add label here if needed */}\n                          <span\n                            style={{\n                              ...styles.featureListDescription,\n                              cursor: \"pointer\"\n                            }}\n                            className=\"feature-list-item-clickable\"\n                            onClick={() =>\n                              handleTokenTooltipFeatureClick(feat.index)\n                            }\n                            onMouseEnter={(e: React.MouseEvent) => {\n                              (\n                                e.target as HTMLDivElement\n                              ).style.textDecoration = \"underline\";\n                            }}\n                            onMouseLeave={(e: React.MouseEvent) => {\n                              (\n                                e.target as HTMLDivElement\n                              ).style.textDecoration = \"none\";\n                            }}\n                            title={`Select Feature ${feat.index} for coloring/multi-select`}\n                          >\n                            - {feat.label.substring(0, 60)}\n                            {feat.label.length > 60 ? \"...\" : \"\"}\n                          </span>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      )}\n\n      {/* --- Token Sequence --- */}\n      <div style={styles.tokenSequence}>\n        {tokens.map((token, index) => {\n          const isHovered = hoveredTokenIndex === index;\n          const isClicked = isTokenSelected(index);\n          // Use independent multi-color mode flags derived earlier\n          const isMultiSegment = isMultiSegmentMode;\n          const isMultiMax = isMultiMaximizeMode;\n          let tokenStyle: CSSProperties = { ...styles.token };\n          let innerContent: React.ReactNode = token;\n\n          // --- Determine Background/Content based on Hover/Selection Priority --- //\n\n          if (hoveredFeatureIndex !== null) {\n            // PRIORITY 1: Hovering over a feature - always show single color for hover target\n            const hoveredArrayIndex = featureIdToArrayIndexMap.get(\n              hoveredFeatureIndex ?? -1\n            );\n            if (hoveredArrayIndex !== undefined) {\n              const act = featureActivations[index]?.[hoveredArrayIndex] ?? 0;\n              // Need a scale specifically for the hover index if different from single selected\n              // Re-using singleColorScale might be okay if its dependencies are correct\n              const scale = singleColorScale; // Check if singleColorScale uses activeArrayIndex correctly\n              const bgColor = scale(act);\n              const textColor =\n                getLuminance(bgColor) > 0.5\n                  ? themes.light.text\n                  : themes.dark.text;\n              const isDimmed =\n                currentThreshold !== null &&\n                act !== 0 &&\n                Math.abs(act) < currentThreshold;\n\n              tokenStyle = {\n                ...tokenStyle,\n                backgroundColor: bgColor,\n                color: textColor,\n                opacity: isDimmed ? 0.5 : 1\n              };\n              // innerContent remains default token text\n            } else {\n              // Handle case where map lookup fails (shouldn't happen)\n              console.warn(\n                \"Could not find array index for hovered feature:\",\n                hoveredFeatureIndex\n              );\n              // innerContent remains default token text\n            }\n          } else if (isMultiSegment) {\n            // PRIORITY 2: Multi-color segments (No hover, multi-select active)\n            const numSegments = selectedFeatureIndices.length;\n            const segmentHeight = 100 / numSegments;\n\n            const backgroundSegments = selectedFeatureIndices.map(\n              (featIndex) => {\n                // Use map to get array index for activation lookup\n                const currentArrayIndex =\n                  featureIdToArrayIndexMap.get(featIndex);\n                if (currentArrayIndex === undefined) {\n                  console.warn(\n                    \"Could not find array index for selected feature:\",\n                    featIndex\n                  );\n                  return null; // Or a default div\n                }\n                const act = featureActivations[index]?.[currentArrayIndex] ?? 0;\n                const scale = featureScales[currentArrayIndex];\n                const bgColor = scale ? scale(act) : \"transparent\";\n                const segmentStyle: CSSProperties = {\n                  height: `${segmentHeight}%`,\n                  width: \"100%\",\n                  backgroundColor: bgColor\n                };\n                return <div key={featIndex} style={segmentStyle}></div>;\n              }\n            );\n\n            tokenStyle = {\n              ...tokenStyle,\n              display: \"inline\",\n              position: \"relative\",\n              backgroundColor: \"transparent\",\n              color: theme.text\n            };\n\n            innerContent = (\n              <span\n                style={{\n                  position: \"relative\",\n                  display: \"inline-block\",\n                  verticalAlign: \"bottom\"\n                }}\n              >\n                <div\n                  style={{\n                    position: \"absolute\",\n                    top: 0,\n                    left: 0,\n                    right: 0,\n                    bottom: 0,\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    zIndex: 0\n                  }}\n                >\n                  {backgroundSegments}\n                </div>\n                {/* Render token text directly, replacing newline chars */}\n                <span\n                  style={{ ...styles.tokenTextOverlay, position: \"relative\" }}\n                >\n                  {typeof token === \"string\" ? token.replace(/\\n/g, \"\u21B5\") : \"\"}\n                </span>\n              </span>\n            );\n          } else if (isMultiMax) {\n            // PRIORITY 3: Maximize over selected features (No hover, multi-select active, not segment mode)\n            const maxActInfo = selectedFeatureIndices.reduce(\n              (maxInfo, currentFeatIndex) => {\n                // Use map to get array index for activation lookup\n                const currentArrayIndex =\n                  featureIdToArrayIndexMap.get(currentFeatIndex);\n                if (currentArrayIndex === undefined) {\n                  console.warn(\n                    \"Could not find array index for selected feature:\",\n                    currentFeatIndex\n                  );\n                  return maxInfo;\n                }\n                const currentVal =\n                  featureActivations[index]?.[currentArrayIndex] ?? 0;\n                if (Math.abs(currentVal) > maxInfo.maxAbs) {\n                  return {\n                    index: currentFeatIndex,\n                    value: currentVal,\n                    maxAbs: Math.abs(currentVal)\n                  };\n                }\n                return maxInfo;\n              },\n              { index: -1, value: 0, maxAbs: -Infinity }\n            );\n\n            // Use maxActArrayIndex for scale lookup if defined\n            const maxActArrayIndex = featureIdToArrayIndexMap.get(\n              maxActInfo.index ?? -1\n            );\n            const scale =\n              maxActArrayIndex !== undefined\n                ? featureScales[maxActArrayIndex]\n                : null;\n\n            const bgColor = scale ? scale(maxActInfo.value) : \"transparent\";\n            const textColor =\n              getLuminance(bgColor) > 0.5\n                ? themes.light.text\n                : themes.dark.text;\n\n            tokenStyle = {\n              ...tokenStyle,\n              backgroundColor: bgColor,\n              color: textColor\n            };\n            // innerContent remains default token text\n          } else {\n            // PRIORITY 4: Single selected feature or default (No hover, no multi-select modes active)\n            // Use coloringFeatureIndex which is derived from selectedFeatureIndices (if length === 1)\n            // Use activeArrayIndex (already derived from coloringFeatureIndex using the map)\n            const currentActiveArrayIndex = featureIdToArrayIndexMap.get(\n              coloringFeatureIndex ?? -1\n            );\n            if (currentActiveArrayIndex !== undefined) {\n              const act =\n                featureActivations[index]?.[currentActiveArrayIndex] ?? 0;\n              const bgColor =\n                coloringFeatureIndex !== null\n                  ? singleColorScale(act)\n                  : styles.container.backgroundColor || \"transparent\";\n              const textColor =\n                getLuminance(bgColor) > 0.5\n                  ? themes.light.text\n                  : themes.dark.text;\n              const isDimmed =\n                coloringFeatureIndex !== null && // Only dim if a feature is actually selected\n                currentThreshold !== null &&\n                act !== 0 &&\n                Math.abs(act) < currentThreshold;\n\n              tokenStyle = {\n                ...tokenStyle,\n                backgroundColor: bgColor,\n                color: textColor,\n                opacity: isDimmed ? 0.5 : 1\n              };\n              // innerContent remains default token text\n            } else {\n              // No active feature, use default background\n              tokenStyle = {\n                ...tokenStyle,\n                backgroundColor:\n                  styles.container.backgroundColor || \"transparent\",\n                color: theme.text\n              };\n            }\n          }\n\n          // --- Apply Hover/Click Outlines --- //\n          if (isHovered && !isClicked) {\n            tokenStyle = { ...tokenStyle, ...styles.tokenHover };\n          }\n          if (isClicked) {\n            tokenStyle = { ...tokenStyle, ...styles.tokenClicked };\n          }\n\n          return (\n            <span\n              key={index}\n              style={tokenStyle}\n              onMouseEnter={(e) => handleTokenMouseEnter(index, e)}\n              onMouseLeave={handleTokenMouseLeave}\n              onClick={() => handleTokenClick(index)}\n              title={\n                token.includes(\"\\n\") ? token.replace(/\\n/g, \"\u21B5\") : undefined\n              }\n            >\n              {/* Render innerContent, replacing newline chars if string */}\n              {typeof innerContent === \"string\"\n                ? innerContent.replace(/\\n/g, \"\u21B5\")\n                : innerContent}\n            </span>\n          );\n        })}\n      </div>\n\n      {/* --- HOVER Token Tooltip (Using Portal) --- */}\n      {hoverTokenTooltipData && (\n        <div\n          style={{\n            ...styles.tooltip,\n            left: `${hoverTokenTooltipData.position.x}px`,\n            top: `${hoverTokenTooltipData.position.y}px`\n          }}\n        >\n          <strong>\n            Token {hoverTokenTooltipData.tokenIndex}: &quot;\n            {tokens[hoverTokenTooltipData.tokenIndex]}&quot;\n          </strong>\n          {hoverTokenTooltipData.selectedFeatureValue !== null && (\n            <div\n              style={{\n                marginTop: \"5px\",\n                borderTop: \"1px dashed #ccc\",\n                paddingTop: \"5px\"\n              }}\n            >\n              Selected Feature {selectedFeatureIndex}:{\" \"}\n              {hoverTokenTooltipData.selectedFeatureValue.toPrecision(3)}\n            </div>\n          )}\n          <br />\n          <strong\n            title={`Showing top ${numTokenToShow} features with abs activation >= ${\n              currentThreshold ?? 0\n            }`}\n          >\n            Top Features:\n          </strong>\n          {hoverTokenTooltipData.topFeatures.length === 0 && (\n            <div>(None above threshold)</div>\n          )}\n          {hoverTokenTooltipData.topFeatures.map((feat) => (\n            <div key={feat.index}>\n              <span style={styles.featureListIndexValue}>{`Feature ${\n                feat.index\n              }: ${feat.activation.toFixed(3)}`}</span>\n              <span\n                style={{\n                  ...styles.featureListDescription,\n                  cursor: \"pointer\"\n                }}\n                className=\"feature-list-item-clickable\"\n                onClick={() => handleTokenTooltipFeatureClick(feat.index)}\n                onMouseEnter={(e: React.MouseEvent) => {\n                  (e.target as HTMLDivElement).style.textDecoration =\n                    \"underline\";\n                }}\n                onMouseLeave={(e: React.MouseEvent) => {\n                  (e.target as HTMLDivElement).style.textDecoration = \"none\";\n                }}\n                title={`Select Feature ${feat.index} for coloring/multi-select`}\n              >\n                - {feat.label.substring(0, 60)}\n                {feat.label.length > 60 ? \"...\" : \"\"}\n              </span>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* --- Feature Info Tooltip (Compact Mode Only - NOT Portalled) --- */}\n      {isCompactView && focusedFeatureInfo && (\n        <div\n          style={{\n            ...styles.tooltip,\n            position: \"absolute\",\n            left: `${focusedFeatureInfo.position.x}px`,\n            top: `${focusedFeatureInfo.position.y}px`,\n            ...(focusedFeatureInfo.isClick ? styles.tooltipSticky : {})\n          }}\n        >\n          {focusedFeatureInfo.isClick && (\n            <button\n              onClick={closeFeatureInfoTooltip}\n              style={styles.tooltipCloseButton}\n              title=\"Close Feature Info\"\n            >\n              \u00D7\n            </button>\n          )}\n          <strong>Feature {focusedFeatureInfo.index}</strong>\n          <div style={{ marginTop: \"5px\" }}>\n            <strong>Label:</strong> {focusedFeatureInfo.label}\n          </div>\n          <div\n            style={{\n              marginTop: \"5px\",\n              paddingTop: \"5px\",\n              borderTop: \"1px dashed #ccc\"\n            }}\n          >\n            <strong>Stats:</strong>\n            <div>Max: {focusedFeatureInfo.maxActivation.toPrecision(3)}</div>\n            <div>L1: {focusedFeatureInfo.meanAbsActivation.toPrecision(3)}</div>\n            <div>L0: {focusedFeatureInfo.nonZeroCount}</div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Add prop types for robustness (optional but recommended)\n// import PropTypes from 'prop-types';\n// SaeVis.propTypes = { ... };\n\nexport default SaeVis; // Make sure it's the default export if render uses it directly\n", "import React from \"react\";\n\n/**\n * Example component that says \"Hello\" to the given name.\n */\nexport function Hello({ name }: HelloProps) {\n  return <p>Hello, {name}!</p>;\n}\n\nexport interface HelloProps {\n  /**\n   * Name to say \"Hello\" to\n   */\n  name: string;\n}\n", "import React from \"react\";\nimport { colord, extend, AnyColor } from \"colord\";\nimport mixPlugin from \"colord/plugins/mix\";\nimport namesPlugin from \"colord/plugins/names\";\nimport { TokenCustomTooltip } from \"../tokens/utils/TokenCustomTooltip\";\nimport { formatTokenText } from \"../tokens/utils/Token\";\n\nextend([mixPlugin, namesPlugin]);\n\nconst maxLogProb = 5;\n\nexport function logProbToColor(\n  logProb: number,\n  color: AnyColor = \"blue\",\n  min: number = -maxLogProb\n) {\n  return colord(color).mix(colord(\"grey\"), Math.min(-logProb / -min, 1.0));\n}\n\nexport function SimpleToken({ token }: { token: string }) {\n  return (\n    <span\n      style={{ borderColor: \"green\", borderWidth: 1, borderStyle: \"solid\" }}\n      dangerouslySetInnerHTML={{ __html: formatTokenText(token) }}\n    />\n  );\n}\n\nexport function TooltipTableRow({\n  token,\n  logProb,\n  rank,\n  isCorrectToken\n}: {\n  token: string;\n  logProb: number;\n  rank: number;\n  isCorrectToken: boolean;\n}) {\n  const correctTokenStyle: React.CSSProperties = {\n    color: \"orange\",\n    backgroundColor: logProbToColor(logProb).toRgbString(),\n    fontWeight: \"bold\"\n  };\n\n  const incorrectTokenStyle: React.CSSProperties = {\n    color: \"white\",\n    backgroundColor: logProbToColor(logProb).toRgbString()\n  };\n\n  return (\n    <tr style={isCorrectToken ? correctTokenStyle : incorrectTokenStyle}>\n      <td>#{rank}</td>\n      <td>{(Math.exp(logProb) * 100).toFixed(2)}%</td>\n      <td>{logProb.toFixed(3)}</td>\n      <td>\n        <SimpleToken token={token} />\n      </td>\n    </tr>\n  );\n}\n\nexport function Tooltip({\n  currentCorrectToken,\n  currentCorrectTokenRank,\n  currentCorrectTokenLogProb,\n  currentTopKLogProbs,\n  currentTopKTokens,\n  prevToken\n}: {\n  currentCorrectToken: string;\n  currentCorrectTokenRank: number;\n  currentCorrectTokenLogProb: number;\n  currentTopKLogProbs: number[];\n  currentTopKTokens: string[];\n  prevToken: string;\n}) {\n  return (\n    <div>\n      <div\n        style={{\n          fontSize: 20,\n          fontWeight: \"bold\",\n          backgroundColor: \"white\",\n          color: \"black\"\n        }}\n      >\n        <SimpleToken token={prevToken}></SimpleToken> -{\">\"}{\" \"}\n        <SimpleToken token={currentCorrectToken} />\n      </div>\n      <table>\n        <tr>\n          <th>Rank</th>\n          <th>Prob</th>\n          <th>Log Prob</th>\n          <th>String</th>\n        </tr>\n        <TooltipTableRow\n          token={currentCorrectToken}\n          logProb={currentCorrectTokenLogProb}\n          rank={currentCorrectTokenRank}\n          isCorrectToken={true}\n        />\n        <hr />\n        {/* currentTopKTokens.map is used in because JavaScript doesn't have range(n). The token is ignored. */}\n        {currentTopKTokens.map((_token, i) => (\n          <TooltipTableRow\n            key={i}\n            token={currentTopKTokens[i]}\n            logProb={currentTopKLogProbs[i]}\n            rank={i}\n            isCorrectToken={currentCorrectTokenRank === i}\n          />\n        ))}\n      </table>\n    </div>\n  );\n}\n\n/**\n * Token log probs visualizer\n *\n * Shows the log probabilities of the top k next tokens for each token in the\n * prompt. Hover over each token to see these.\n */\nexport function TokenLogProbs({\n  prompt,\n  topKLogProbs,\n  topKTokens,\n  correctTokenRank,\n  correctTokenLogProb\n}: TokenLogProbsProps) {\n  return (\n    // Padding to ensure that the tooltip is visible - pretty janky, sorry!\n    <div style={{ paddingBottom: 350 }}>\n      {prompt.slice(1).map((token, i) => (\n        <TokenCustomTooltip\n          key={i}\n          token={token}\n          value={Math.max(maxLogProb + correctTokenLogProb[i], 0)}\n          min={-0.1}\n          max={maxLogProb}\n          positiveColor=\"red\"\n          tooltip={\n            <Tooltip\n              currentCorrectToken={token}\n              currentCorrectTokenRank={correctTokenRank[i]}\n              currentCorrectTokenLogProb={correctTokenLogProb[i]}\n              currentTopKLogProbs={topKLogProbs[i]}\n              currentTopKTokens={topKTokens[i]}\n              prevToken={prompt[i]}\n            />\n          }\n        />\n      ))}\n    </div>\n  );\n}\n\nexport interface TokenLogProbsProps {\n  /**\n   * Prompt as a list of tokens.\n   */\n  prompt: string[];\n\n  /**\n   * Log probs of the top K next tokens, for each token in the prompt.\n   */\n  topKLogProbs: number[][];\n\n  /**\n   * Top K next tokens, for each token in the prompt.\n   */\n  topKTokens: string[][];\n\n  /**\n   * Rank of the correct next token, for each token in the prompt.\n   */\n  correctTokenRank: number[];\n\n  /**\n   * Log prob of the correct next token, for each token in the prompt.\n   */\n  correctTokenLogProb: number[];\n}\n", "import React from \"react\";\nimport { colord, AnyColor } from \"colord\";\nimport { usePopperTooltip } from \"react-popper-tooltip\";\nimport { getTokenBackgroundColor } from \"../../utils/getTokenBackgroundColor\";\nimport { formatTokenText } from \"./Token\";\n\n/**\n * Token (shown as an inline block)\n */\nexport function TokenCustomTooltip({\n  token,\n  value,\n  min,\n  max,\n  negativeColor,\n  positiveColor,\n  tooltip = <>{\"Intentionally Left Blank\"}</>\n}: {\n  token: string;\n  value: number;\n  min: number;\n  max: number;\n  negativeColor?: AnyColor;\n  positiveColor?: AnyColor;\n  tooltip?: React.ReactNode;\n}) {\n  // Hover state\n  const { getTooltipProps, setTooltipRef, setTriggerRef, visible } =\n    usePopperTooltip({\n      followCursor: true\n    });\n\n  // Get the background color\n  const backgroundColor = getTokenBackgroundColor(\n    value,\n    min,\n    max,\n    negativeColor,\n    positiveColor\n  ).toRgbString();\n\n  // Get the text color\n  const textColor =\n    colord(backgroundColor).brightness() < 0.6 ? \"white\" : \"black\";\n\n  // Format the span (CSS style)\n  const spanStyle: React.CSSProperties = {\n    display: \"inline-block\",\n    backgroundColor,\n    color: textColor,\n    lineHeight: \"1em\",\n    padding: \"3px 0\",\n    marginLeft: -1,\n    marginBottom: 1,\n    borderWidth: 1,\n    borderStyle: \"solid\",\n    borderColor: \"#eee\"\n  };\n\n  // Handle special tokens (e.g. spaces/line breaks)\n  const tokenReplaceLineBreaks = formatTokenText(token);\n  const lineBreakElements = token.match(/\\n/g)!;\n\n  return (\n    <>\n      <span ref={setTriggerRef}>\n        <span\n          style={spanStyle}\n          dangerouslySetInnerHTML={{ __html: tokenReplaceLineBreaks }}\n        ></span>\n        {lineBreakElements?.map((_break, idx) => (\n          <br key={idx} />\n        ))}\n      </span>\n\n      {visible && (\n        <div\n          ref={setTooltipRef}\n          {...getTooltipProps({\n            style: {\n              background: \"#eee\",\n              color: \"black\",\n              textAlign: \"center\",\n              padding: 10,\n              borderRadius: 5,\n              boxShadow: \"5px 5px rgba(0, 0, 0, 0.03)\",\n              marginTop: 15\n            }\n          })}\n        >\n          {tooltip}\n        </div>\n      )}\n    </>\n  );\n}\n", "/* eslint-disable import/no-extraneous-dependencies */\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\n\n/**\n * Render Helper\n *\n * Renders a CircuitVis visualization to a div element in the DOM. This enables\n * quick importing and use of this library.\n *\n * @example\n * ```html\n * <script\n *   crossorigin\n *   type=\"module\"\n *   src=\"https://unpkg.com/circuits-vis/dist/cdn/with-react.iife.js\">\n *   CircuitsVis.render(\n *     \"my-div-id\",\n *     CircuitsVis.Hello,\n *     {\n *        name: \"Bob\"\n *     }\n *   )\n * </script>\n * <div id=\"my-div-id\"/>\n * ```\n *\n * @param divID ID of the div that we're rendering to\n * @param circuitsVisElement Visualization from CircuitsVis (e.g. `CircuitsVis.Hello`)\n * @param props Props for the visualization passed as an object.\n */\nexport function render(\n  divID: string,\n  circuitsVisElement: any,\n  props: { [key: string]: any } = {}\n) {\n  const div = document.querySelector(`#${divID}`) as HTMLDivElement;\n  const root = ReactDOM.createRoot(div);\n  const element = React.createElement(circuitsVisElement, props);\n  root.render(element);\n}\n", "import { Rank, tensor, Tensor1D, Tensor2D } from \"@tensorflow/tfjs\";\nimport React, { useState, useEffect } from \"react\";\nimport { ColoredTokensCustomTooltips } from \"./ColoredTokensCustomTooltips\";\nimport { useHoverLock } from \"../attention/components/useHoverLock\";\n\nconst PRECISION = 6;\n\nexport function ValueSelector({\n  values,\n  labels,\n  selectedValue,\n  setSelectedValue\n}: {\n  values: Tensor2D;\n  labels: string[];\n  selectedValue: number;\n  setSelectedValue: (value: number) => void;\n}) {\n  const numValues = values.shape[1];\n\n  const {\n    focused: focusedValue,\n    onClick: onClickValue,\n    onMouseEnter: onMouseEnterValue,\n    onMouseLeave: onMouseLeaveValue\n  } = useHoverLock();\n\n  // Janky setup because focusedValue and selectedValue are not the same thing.\n  // Keeps them in sync, but only when focusedValue is not null.\n  // This means that when the user moves their cursor off the selector, it\n  // remains with that value selected, rather than being null.\n  useEffect(() => {\n    if (focusedValue !== null) {\n      setSelectedValue(focusedValue);\n    }\n  }, [focusedValue, setSelectedValue]);\n\n  const valueSelectors = [];\n  for (let i = 0; i < numValues; i++) {\n    const isSelected = i === selectedValue;\n    const label = labels[i];\n    valueSelectors.push(\n      <div\n        key={i}\n        style={{\n          display: \"inline-block\",\n          padding: \"0 5px\",\n          backgroundColor: isSelected ? \"black\" : \"white\",\n          color: isSelected ? \"white\" : \"black\",\n          cursor: \"pointer\"\n        }}\n        onClick={() => onClickValue(i)}\n        onMouseEnter={() => onMouseEnterValue(i)}\n        onMouseLeave={onMouseLeaveValue}\n      >\n        {label}\n      </div>\n    );\n  }\n\n  return <div>{valueSelectors}</div>;\n}\n\nexport function NumberInput({\n  value,\n  setValue,\n  defaultValue,\n  label\n}: {\n  value: number;\n  setValue: (value: number) => void;\n  defaultValue?: number;\n  label: string;\n}) {\n  const handleInputChange = (event: { target: { value: string } }) => {\n    setValue(parseFloat(event.target.value));\n  };\n\n  const handleButtonClick = () => {\n    setValue(defaultValue!);\n  };\n\n  return (\n    <div>\n      <label htmlFor={label}>{label}:</label>{\" \"}\n      <input\n        type=\"text\"\n        id=\"number\"\n        value={value}\n        onChange={handleInputChange}\n      />\n      {defaultValue && (\n        <button type=\"button\" onClick={handleButtonClick}>\n          Reset\n        </button>\n      )}\n    </div>\n  );\n}\n\nexport function Tooltip({\n  title,\n  labels,\n  values,\n  tokenIndex,\n  currentValueIndex\n}: {\n  title: string;\n  labels: string[];\n  values: Tensor2D;\n  tokenIndex: number;\n  currentValueIndex: number;\n}) {\n  const numValues = values.shape[1];\n\n  const valueRows = [];\n  for (let i = 0; i < numValues; i++) {\n    valueRows.push(\n      <tr key={i}>\n        <td style={{ fontWeight: \"bold\" }}>{labels[i]}</td>\n        <td\n          style={{\n            textAlign: \"right\",\n            fontWeight: currentValueIndex === i ? \"bold\" : \"normal\"\n          }}\n        >\n          {values.bufferSync().get(tokenIndex, i).toFixed(PRECISION)}\n        </td>\n      </tr>\n    );\n  }\n\n  return (\n    <>\n      <div\n        style={{ fontWeight: \"bold\", fontSize: 16, backgroundColor: \"white\" }}\n      >\n        {title}\n      </div>\n      <table>\n        <tbody>{valueRows}</tbody>\n      </table>\n    </>\n  );\n}\n\n/**\n * Extension of ColoredTokens to allow K vectors of values across tokens. Each\n * vector has a positive and negative color associated. For the selected vector,\n * display tokens with a background representing how negative (close to\n * `negativeColor`) or positive (close to `positiveColor`) the token is. Zero is\n * always displayed as white.\n *\n * Hover over a token, to view all K of its values.\n */\nexport function ColoredTokensMulti({\n  tokens,\n  values,\n  labels,\n  positiveBounds,\n  negativeBounds\n}: ColoredTokensMultiProps) {\n  const valuesTensor = tensor<Rank.R2>(values);\n\n  const numValues = valuesTensor.shape[1];\n\n  // Define default positive and negative bounds if not provided\n  // These are the max/min elements of the value tensor, capped at +-1e-7 (not\n  // zero, to avoid a bug in our color calculation code)\n  const positiveBoundsTensor: Tensor1D = positiveBounds\n    ? tensor<Rank.R1>(positiveBounds)\n    : valuesTensor.max(0).maximum(1e-7);\n  const negativeBoundsTensor: Tensor1D = negativeBounds\n    ? tensor<Rank.R1>(negativeBounds)\n    : valuesTensor.min(0).minimum(-1e-7);\n\n  // Define default labels if not provided\n  const valueLabels =\n    labels || Array.from(Array(numValues).keys()).map((_, i) => `${i}`);\n\n  const [displayedValueIndex, setDisplayedValueIndex] = useState<number>(0);\n\n  // Positive and negative bounds state\n  const defaultPositiveBound = Number(\n    positiveBoundsTensor.arraySync()[displayedValueIndex].toFixed(PRECISION)\n  );\n  const defaultNegativeBound = Number(\n    negativeBoundsTensor.arraySync()[displayedValueIndex].toFixed(PRECISION)\n  );\n  const [positiveBound, setOverridePositiveBound] = useState<number>(\n    Number(defaultPositiveBound)\n  );\n  const [negativeBound, setOverrideNegativeBound] = useState<number>(\n    Number(defaultNegativeBound)\n  );\n\n  const displayedValues = valuesTensor\n    .slice([0, displayedValueIndex], [-1, 1])\n    .squeeze<Tensor1D>([1]);\n\n  // Padding to ensure that the tooltip is visible - pretty janky, sorry!\n  return (\n    <div style={{ paddingBottom: 20 * numValues }}>\n      <ValueSelector\n        values={valuesTensor}\n        labels={valueLabels}\n        selectedValue={displayedValueIndex}\n        setSelectedValue={setDisplayedValueIndex}\n      />\n\n      <NumberInput\n        value={positiveBound}\n        setValue={setOverridePositiveBound}\n        defaultValue={defaultPositiveBound}\n        label={\"Positive Bound\"}\n      />\n      <NumberInput\n        value={negativeBound}\n        setValue={setOverrideNegativeBound}\n        defaultValue={defaultNegativeBound}\n        label={\"Negative Bound\"}\n      />\n\n      <br />\n\n      <ColoredTokensCustomTooltips\n        tokens={tokens}\n        values={displayedValues.arraySync()}\n        maxValue={positiveBound}\n        minValue={negativeBound}\n        tooltips={displayedValues.arraySync().map((_val, i) => (\n          <Tooltip\n            key={i}\n            title={tokens[i]}\n            labels={valueLabels}\n            values={valuesTensor}\n            tokenIndex={i}\n            currentValueIndex={displayedValueIndex}\n          />\n        ))}\n      />\n    </div>\n  );\n}\n\nexport interface ColoredTokensMultiProps {\n  /**\n   * The prompt for the model, split into S tokens (as strings)\n   */\n  tokens: string[];\n  /**\n   * The tensor of values across the tokens. Shape [S, K]\n   */\n  values: number[][];\n  /**\n   * The labels for the K vectors\n   */\n  labels?: string[];\n  /**\n   *\n   */\n  positiveBounds?: number[];\n  /**\n   */\n  negativeBounds?: number[];\n}\n", "import { AnyColor } from \"colord\";\nimport React from \"react\";\nimport { TokenCustomTooltip } from \"./utils/TokenCustomTooltip\";\n\n/**\n * Display tokens with a background representing how negative (close to\n * `negativeColor`) or positive (close to `positiveColor`) the token is. Zero is\n * always displayed as white.\n *\n * Hover over a token, to view its value.\n */\nexport function ColoredTokensCustomTooltips({\n  maxValue,\n  minValue,\n  negativeColor,\n  positiveColor,\n  tokens,\n  values,\n  tooltips\n}: ColoredTokensCustomTooltipsProps) {\n  const tokenMin = minValue ?? Math.min(...values);\n  const tokenMax = maxValue ?? Math.max(...values);\n\n  return (\n    <div className=\"colored-tokens\" style={{ paddingBottom: 30 }}>\n      {tokens.map((token, key) => (\n        <TokenCustomTooltip\n          key={key}\n          token={token}\n          value={values[key]}\n          min={tokenMin}\n          max={tokenMax}\n          negativeColor={negativeColor}\n          positiveColor={positiveColor}\n          tooltip={tooltips[key]}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport interface ColoredTokensCustomTooltipsProps {\n  /**\n   * Maximum value\n   *\n   * Used to determine how dark the token color is when positive (i.e. based on\n   * how close it is to the minimum value).\n   *\n   * @default Math.max(...values)\n   */\n  maxValue?: number;\n\n  /**\n   * Minimum value\n   *\n   * Used to determine how dark the token color is when negative (i.e. based on\n   * how close it is to the minimum value).\n   *\n   * @default Math.min(...values)\n   */\n  minValue?: number;\n\n  /**\n   * Negative color\n   *\n   * Color to use for negative values. This can be any valid CSS color string.\n   *\n   * Be mindful of color blindness if not using the default here.\n   *\n   * @default \"red\"\n   *\n   * @example rgb(255, 0, 0)\n   *\n   * @example #ff0000\n   */\n  negativeColor?: AnyColor;\n\n  /**\n   * Positive color\n   *\n   * Color to use for positive values. This can be any valid CSS color string.\n   *\n   * Be mindful of color blindness if not using the default here.\n   *\n   * @default \"blue\"\n   *\n   * @example rgb(0, 0, 255)\n   *\n   * @example #0000ff\n   */\n  positiveColor?: AnyColor;\n\n  /**\n   * List of tokens\n   *\n   * Must be the same length as the list of values.\n   */\n  tokens: string[];\n\n  /**\n   * Values for each token\n   *\n   * Must be the same length as the list of tokens.\n   */\n  values: number[];\n\n  /**\n   * Tooltips for each token\n   *\n   * Must be the same length as the list of tokens.\n   */\n  tooltips: React.ReactNode[];\n}\n", "import React, { useState, useEffect } from \"react\";\nimport { Container, Row, Col } from \"react-grid-system\";\nimport { SampleItems } from \"../shared/SampleItems\";\nimport { RangeSelector } from \"../shared/RangeSelector\";\nimport { NumberSelector } from \"../shared/NumberSelector\";\nimport { minMaxInNestedArray } from \"../utils/arrayOps\";\n\n/**\n * List of samples in descending order of max token activation value for the\n * selected layer and neuron (or whatever other dimension names are specified).\n */\nexport function TopkSamples({\n  tokens,\n  activations,\n  zerothDimensionName = \"Layer\",\n  firstDimensionName = \"Neuron\",\n  zerothDimensionLabels,\n  firstDimensionLabels\n}: TopkSamplesProps) {\n  const numberOfLayers = activations.length;\n  const numberOfNeurons = activations[0].length;\n  const numberOfSamples = activations[0][0].length;\n\n  const [samplesPerPage, setSamplesPerPage] = useState<number>(\n    Math.min(5, numberOfSamples)\n  );\n  const [sampleNumbers, setSampleNumbers] = useState<number[]>([\n    ...Array(samplesPerPage).keys()\n  ]);\n  const [layerNumber, setLayerNumber] = useState<number>(0);\n  const [neuronNumber, setNeuronNumber] = useState<number>(0);\n\n  useEffect(() => {\n    // When the user changes the samplesPerPage, update the sampleNumbers\n    setSampleNumbers([...Array(samplesPerPage).keys()]);\n  }, [samplesPerPage]);\n\n  // Get the relevant activations for the selected layer and neuron.\n  const selectedActivations: number[][] = sampleNumbers.map((sampleNumber) => {\n    return activations[layerNumber][neuronNumber][sampleNumber];\n  });\n  const selectedTokens: string[][] = sampleNumbers.map((sampleNumber) => {\n    return tokens[layerNumber][neuronNumber][sampleNumber];\n  });\n\n  // For a consistent color scale across all samples in this layer and neuron\n  const [minValue, maxValue] = minMaxInNestedArray(\n    activations[layerNumber][neuronNumber]\n  );\n\n  const selectRowStyle = {\n    paddingTop: 5,\n    paddingBottom: 5\n  };\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col>\n          <Row style={selectRowStyle}>\n            <Col>\n              <label htmlFor=\"layer-selector\" style={{ marginRight: 15 }}>\n                {zerothDimensionName}:\n              </label>\n              <NumberSelector\n                id=\"layer-selector\"\n                largestNumber={numberOfLayers! - 1}\n                currentValue={layerNumber}\n                setCurrentValue={setLayerNumber}\n                labels={zerothDimensionLabels}\n              />\n            </Col>\n          </Row>\n          <Row style={selectRowStyle}>\n            <Col>\n              <label htmlFor=\"neuron-selector\" style={{ marginRight: 15 }}>\n                {firstDimensionName}:\n              </label>\n              <NumberSelector\n                id=\"neuron-selector\"\n                largestNumber={numberOfNeurons! - 1}\n                currentValue={neuronNumber}\n                setCurrentValue={setNeuronNumber}\n                labels={firstDimensionLabels}\n              />\n            </Col>\n          </Row>\n          {/* Only show the sample selector if there is more than one sample */}\n          {numberOfSamples > 1 && (\n            <Row style={selectRowStyle}>\n              <Col>\n                <label htmlFor=\"sample-selector\" style={{ marginRight: 15 }}>\n                  Samples (descending):\n                </label>\n                <RangeSelector\n                  id=\"sample-selector\"\n                  largestNumber={numberOfSamples - 1}\n                  currentRangeArr={sampleNumbers}\n                  setCurrentValue={setSampleNumbers}\n                  numValsInRange={samplesPerPage}\n                />\n              </Col>\n            </Row>\n          )}\n        </Col>\n        <Col>\n          {/* Only show the sample per page selector if there is more than one sample */}\n          {numberOfSamples > 1 && (\n            <Row style={selectRowStyle}>\n              <Col>\n                <label\n                  htmlFor=\"samples-per-page-selector\"\n                  style={{ marginRight: 15 }}\n                >\n                  Samples per page:\n                </label>\n                <NumberSelector\n                  id=\"samples-per-page-selector\"\n                  smallestNumber={1}\n                  largestNumber={numberOfSamples}\n                  currentValue={samplesPerPage}\n                  setCurrentValue={setSamplesPerPage}\n                />\n              </Col>\n            </Row>\n          )}\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <SampleItems\n            activationsList={selectedActivations}\n            tokensList={selectedTokens}\n            minValue={minValue}\n            maxValue={maxValue}\n          />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport interface TopkSamplesProps {\n  /**\n   * Nested list of tokens of shape [layers x neurons x samples x tokens]\n   *\n   * The inner most dimension must be the same size as the inner most dimension of activations.\n   *\n   * For example, the first and second dimensisons (1-indexed) may correspond to\n   * layers and neurons.\n   */\n  tokens: string[][][][];\n\n  /**\n   * Activations for the tokens with shape [layers x neurons x samples x tokens]\n   *\n   */\n  activations: number[][][][];\n\n  /**\n   * Name of the zeroth dimension\n   */\n  zerothDimensionName?: string;\n\n  /**\n   * Name of the first dimension\n   */\n  firstDimensionName?: string;\n\n  /**\n   * Labels for the zeroth dimension\n   */\n  zerothDimensionLabels?: string[];\n\n  /**\n   * Labels for the first dimension\n   */\n  firstDimensionLabels?: string[];\n}\n", "import React, { useState, useEffect } from \"react\";\nimport { Container, Row, Col } from \"react-grid-system\";\nimport { usePopperTooltip } from \"react-popper-tooltip\";\nimport { colord, AnyColor } from \"colord\";\nimport { getTokenBackgroundColor } from \"../utils/getTokenBackgroundColor\";\nimport { arraySlice2D } from \"../utils/arrayOps\";\nimport { RangeSelector } from \"../shared/RangeSelector\";\nimport { NumberSelector } from \"../shared/NumberSelector\";\n\n/**\n * Create a grid cell containing the token coloured by its activation value.\n *\n * @returns A td element.\n */\nexport function TokenCell({\n  tdKey,\n  token,\n  value,\n  minValue,\n  maxValue,\n  negativeColor,\n  positiveColor\n}: {\n  /** The td key */\n  tdKey: number;\n  /** The token to display */\n  token: string;\n  /** The value to use for the token's background color and tooltip display */\n  value: number;\n  /** The minimum value for setting the colour scheme */\n  minValue: number;\n  /** The maximum value for setting the colour scheme */\n  maxValue: number;\n  /** The color to use for negative values */\n  negativeColor?: AnyColor;\n  /** The color to use for positive values */\n  positiveColor?: AnyColor;\n}) {\n  // Hover state\n  const { getTooltipProps, setTooltipRef, setTriggerRef, visible } =\n    usePopperTooltip({\n      followCursor: true\n    });\n\n  const backgroundColor: string = getTokenBackgroundColor(\n    value,\n    minValue,\n    maxValue,\n    negativeColor,\n    positiveColor\n  ).toRgbString();\n\n  const textColor: string =\n    colord(backgroundColor).brightness() < 0.6 ? \"white\" : \"black\";\n\n  const tokenReplaceSpaces = token.replace(/\\s/g, \"&nbsp;\");\n  const tokenReplaceLineBreaks = tokenReplaceSpaces.replace(/\\n/g, \"\u00B6\");\n\n  return (\n    <td\n      key={tdKey}\n      style={{\n        backgroundColor,\n        borderWidth: 1,\n        borderStyle: \"solid\",\n        borderColor: \"black\"\n      }}\n    >\n      <span\n        ref={setTriggerRef}\n        style={{ display: \"block\", color: textColor }}\n        dangerouslySetInnerHTML={{ __html: tokenReplaceLineBreaks }}\n      ></span>\n      {visible && (\n        <div\n          ref={setTooltipRef}\n          {...getTooltipProps({\n            style: {\n              background: \"#333\",\n              color: \"white\",\n              textAlign: \"center\",\n              padding: 10,\n              borderRadius: 5,\n              boxShadow: \"5px 5px rgba(0, 0, 0, 0.03)\",\n              marginTop: 15,\n              zIndex: 1\n            }\n          })}\n        >\n          <strong>{token}</strong>\n          <br />\n          {value}\n        </div>\n      )}\n    </td>\n  );\n}\n\n/**\n * Create a table with the topk and bottomk tokens for each neuron in the selected range.\n *\n * @returns A html table element containing the topk table.\n */\nexport function TopBottomKTable({\n  topkActivations,\n  bottomkActivations,\n  topkTokens,\n  bottomkTokens,\n  neuronNumbers,\n  filter,\n  colLabel\n}: {\n  /** Topk activations for the selected sample and neuron numbers [ tokens x neurons ] */\n  topkActivations: number[][];\n  /** Bottomk activations for the selected sample and neuron numbers [ tokens x neurons ] */\n  bottomkActivations: number[][];\n  /** Topk tokens for the selected sample and neuron numbers [ tokens x neurons ] */\n  topkTokens: string[][];\n  /** Bottomk tokens for the selected sample and neuron numbers [ tokens x neurons ] */\n  bottomkTokens: string[][];\n  /** The neuron numbers we wish to display (each will have its own column) */\n  neuronNumbers: number[];\n  /** Indicates whether to show topk, bottomk or both. */\n  filter: string;\n  /** The column label to use for the table */\n  colLabel: string;\n}) {\n  return (\n    <table style={{ marginTop: 15, marginLeft: 15 }}>\n      <thead>\n        <tr>\n          {/* Label for all columns */}\n          <th\n            colSpan={neuronNumbers.length + 1}\n            style={{ textAlign: \"center\", paddingLeft: \"9ch\" }}\n          >\n            {colLabel}\n          </th>\n        </tr>\n        {/* The header row just shows the current neuron idx */}\n        <tr>\n          <th key=\"default\" style={{ textAlign: \"center\" }}></th>\n          {neuronNumbers.map((neuronNumber) => (\n            <th key={neuronNumber} style={{ textAlign: \"center\" }}>\n              {neuronNumber}\n            </th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {/* Only show the top activations if the filter contains the substring \"topk\" */}\n        {filter.includes(\"topk\") &&\n          topkActivations.map((activations, tokenIdx) => (\n            <tr key={tokenIdx}>\n              {tokenIdx === 0 && (\n                <td\n                  key=\"default\"\n                  style={{ textAlign: \"center\", fontWeight: \"bold\" }}\n                  rowSpan={topkActivations.length}\n                >\n                  Topk &darr;\n                </td>\n              )}\n              {/* Show the coloured token for each topk activation */}\n              {activations.map((activation, neuronIdx) => (\n                <TokenCell\n                  key={neuronIdx}\n                  tdKey={neuronIdx}\n                  token={topkTokens[tokenIdx][neuronIdx]}\n                  value={activation}\n                  minValue={0}\n                  maxValue={1}\n                />\n              ))}\n            </tr>\n          ))}\n        {/* Only show the ellipses if filter === \"topk+bottomk\" */}\n        {filter === \"topk+bottomk\" && (\n          <tr>\n            {/* First add empty space for the label column */}\n            <td key=\"default\" style={{ textAlign: \"center\" }}></td>\n            {/* Add an ellipse for each column */}\n            {Array(topkActivations[0].length)\n              .fill(0)\n              .map((_, idx) => (\n                <td key={idx}>\n                  <div style={{ textAlign: \"center\" }}>...</div>\n                </td>\n              ))}\n          </tr>\n        )}\n        {filter.includes(\"bottomk\") &&\n          bottomkActivations.map((activations, tokenIdx) => (\n            <tr key={tokenIdx}>\n              {tokenIdx === 0 && (\n                <td\n                  key=\"default\"\n                  style={{ textAlign: \"center\", fontWeight: \"bold\" }}\n                  rowSpan={bottomkActivations.length}\n                >\n                  Bottomk &darr;\n                </td>\n              )}\n              {/* Show the coloured token for each bottomk activation */}\n              {activations.map((activation, neuronIdx) => (\n                <TokenCell\n                  key={neuronIdx}\n                  tdKey={neuronIdx}\n                  token={bottomkTokens[tokenIdx][neuronIdx]}\n                  value={activation}\n                  minValue={0}\n                  maxValue={1}\n                />\n              ))}\n            </tr>\n          ))}\n      </tbody>\n    </table>\n  );\n}\n\n/**\n * Show the topk and bottomk tokens for each neuron/directions.\n *\n * Includes drop-downs for k, layer and neuron numbers, and the number of\n * columns to show (representing the neurons or directions).\n */\nexport function TopkTokens({\n  tokens,\n  topkVals,\n  topkIdxs,\n  bottomkVals,\n  bottomkIdxs,\n  firstDimensionName = \"Layer\",\n  thirdDimensionName = \"Neuron\", // Note that we simply use neuron for variable names throughout this file\n  sampleLabels,\n  firstDimensionLabels\n}: TopkTokensProps) {\n  const numberOfSamples = topkVals.length;\n  const numberOfLayers = topkVals[0].length;\n  const maxk = topkVals[0][0].length;\n  const numberOfNeurons = topkVals[0][0][0].length;\n\n  /** TODO: reqct-hook-form <- investigate */\n  const [sampleNumber, setSampleNumber] = useState<number>(0);\n  const [layerNumber, setLayerNumber] = useState<number>(0);\n  const [colsToShow, setColsToShow] = useState<number>(5);\n  const [k, setK] = useState<number>(maxk);\n  const [neuronNumbers, setNeuronNumbers] = useState<number[]>([\n    ...Array(colsToShow).keys()\n  ]);\n  // Filter for whether to show the topk, bottomk or both (written as \"bottomk+topk\")\n  const [filter, setFilter] = useState<string>(\"topk+bottomk\");\n\n  useEffect(() => {\n    // When the user changes the colsToShow, update the neuronNumbers\n    setNeuronNumbers(numberOfSamples > 1 ? [...Array(colsToShow).keys()] : [0]);\n  }, [colsToShow, numberOfSamples]);\n\n  const currentTokens: string[] = tokens[sampleNumber];\n  // Start-end ranges for the slice of the topk/bottomk arrays\n  const dimRanges: [number, number][] = [\n    [0, k],\n    [neuronNumbers[0], neuronNumbers[neuronNumbers.length - 1] + 1]\n  ];\n  const currentTopkVals: number[][] = arraySlice2D(\n    topkVals[sampleNumber][layerNumber],\n    dimRanges\n  );\n  const currentTopkIdxs: number[][] = arraySlice2D(\n    topkIdxs[sampleNumber][layerNumber],\n    dimRanges\n  );\n  const currentBottomkVals: number[][] = arraySlice2D(\n    bottomkVals[sampleNumber][layerNumber],\n    dimRanges\n  );\n  const currentBottomkIdxs: number[][] = arraySlice2D(\n    bottomkIdxs[sampleNumber][layerNumber],\n    dimRanges\n  );\n\n  const topkTokens: string[][] = currentTopkIdxs.map((outerArr) =>\n    outerArr.map((token_idx) => currentTokens[token_idx])\n  );\n  const bottomkTokens: string[][] = currentBottomkIdxs.map((outerArr) =>\n    outerArr.map((token_idx) => currentTokens[token_idx])\n  );\n\n  const selectRowStyle = {\n    paddingTop: 5,\n    paddingBottom: 5\n  };\n\n  return (\n    <div>\n      <Container fluid>\n        <Row>\n          <Col>\n            <Row style={selectRowStyle}>\n              <Col>\n                <label htmlFor=\"sample-selector\" style={{ marginRight: 15 }}>\n                  Sample:\n                </label>\n                <NumberSelector\n                  id=\"sample-selector\"\n                  smallestNumber={0}\n                  largestNumber={numberOfSamples - 1}\n                  currentValue={sampleNumber}\n                  setCurrentValue={setSampleNumber}\n                  labels={sampleLabels}\n                />\n              </Col>\n            </Row>\n            <Row style={selectRowStyle}>\n              <Col>\n                <label htmlFor=\"layer-selector\" style={{ marginRight: 15 }}>\n                  {firstDimensionName}:\n                </label>\n                <NumberSelector\n                  id=\"layer-selector\"\n                  largestNumber={numberOfLayers - 1}\n                  currentValue={layerNumber}\n                  setCurrentValue={setLayerNumber}\n                  labels={firstDimensionLabels}\n                />\n              </Col>\n            </Row>\n            <Row style={selectRowStyle}>\n              <Col>\n                <label htmlFor=\"neuron-selector\" style={{ marginRight: 15 }}>\n                  {thirdDimensionName}:\n                </label>\n                <RangeSelector\n                  id=\"neuron-selector\"\n                  largestNumber={numberOfNeurons - 1}\n                  currentRangeArr={neuronNumbers}\n                  setCurrentValue={setNeuronNumbers}\n                  numValsInRange={colsToShow}\n                />\n              </Col>\n            </Row>\n          </Col>\n          <Col>\n            <Row style={selectRowStyle}>\n              <Col>\n                <label htmlFor=\"filter-select\" style={{ marginRight: 15 }}>\n                  Filter:\n                </label>\n                <select\n                  value={filter}\n                  onChange={(event) => setFilter(event.target.value)}\n                  id=\"filter-select\"\n                >\n                  <option value={undefined}>topk+bottomk</option>\n                  <option value=\"topk\">topk</option>\n                  <option value=\"bottomk\">bottomk</option>\n                </select>\n              </Col>\n            </Row>\n            <Row style={selectRowStyle}>\n              <Col>\n                <label\n                  htmlFor=\"visibleCols-selector\"\n                  style={{ marginRight: 15 }}\n                >\n                  {thirdDimensionName}s to show:\n                </label>\n                <NumberSelector\n                  id=\"visible-cols-selector\"\n                  smallestNumber={1}\n                  largestNumber={numberOfNeurons}\n                  currentValue={colsToShow}\n                  setCurrentValue={setColsToShow}\n                />\n              </Col>\n            </Row>\n            <Row style={selectRowStyle}>\n              <Col>\n                <label htmlFor=\"k-selector\" style={{ marginRight: 15 }}>\n                  k:\n                </label>\n                <NumberSelector\n                  id=\"k-selector\"\n                  smallestNumber={1}\n                  largestNumber={maxk}\n                  currentValue={k}\n                  setCurrentValue={setK}\n                />\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n      </Container>\n      <TopBottomKTable\n        topkActivations={currentTopkVals}\n        bottomkActivations={currentBottomkVals}\n        topkTokens={topkTokens}\n        bottomkTokens={bottomkTokens}\n        neuronNumbers={neuronNumbers}\n        filter={filter}\n        colLabel={thirdDimensionName}\n      />\n    </div>\n  );\n}\n\nexport interface TopkTokensProps {\n  /**\n   * List of lists of tokens [ samples x tokens ]\n   *\n   * Each list must be the same length as the number of activations in the\n   * corresponding activations list.\n   */\n  tokens: string[][];\n\n  /**\n   * Topk values\n   *\n   * Nested list of activation values of the form [ samples x layers x k x neurons].\n   */\n  topkVals: number[][][][];\n\n  /**\n   * Topk indices\n   *\n   * Nested list of token indices of the form [ samples x layers x k x neurons].\n   */\n  topkIdxs: number[][][][];\n\n  /**\n   * Bottomk values\n   *\n   * Nested list of activation values of the form [ samples x layers x k x neurons].\n   */\n  bottomkVals: number[][][][];\n\n  /**\n   * Bottomk indices\n   *\n   * Nested list of token indices of the form [ samples x layers x k x neurons].\n   */\n  bottomkIdxs: number[][][][];\n\n  /**\n   * Name of the first dimension (e.g. \"Layer\")\n   *\n   */\n  firstDimensionName?: string;\n\n  /**\n   * Name of the third dimension (e.g. \"Neuron\"). Cannot have labels for this dimension as we use a range selector for pagination.\n   */\n  thirdDimensionName?: string;\n\n  /**\n   * Labels for the samples (i.e. the zeroth dimension)\n   */\n  sampleLabels?: string[];\n\n  /**\n   * Labels for the first dimension\n   */\n  firstDimensionLabels?: string[];\n}\n"],
  "mappings": "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",
  "names": ["import_react", "import_react_grid_system", "import_react", "import_react", "import_colord", "mixPlugin", "namesPlugin", "React", "React", "React", "import_react", "React", "import_react", "React", "React", "import_react", "import_react_grid_system", "import_react", "import_react_grid_system", "import_colord", "ChartJS", "React", "import_react", "React", "import_react", "import_tfjs", "import_tinycolor2", "import_react", "import_tfjs", "React", "import_tfjs", "import_react", "Token", "tinycolor", "React", "tinycolor", "React", "import_react", "r", "g", "b", "_a", "topFeatures", "selectedArrayIndex", "currentSelectedFeatureActivationValue", "containerRect", "scrollLeft", "scrollTop", "position", "React", "_b", "import_react", "React", "import_react", "import_colord", "import_mix", "import_names", "import_react", "import_colord", "import_react_popper_tooltip", "React", "mixPlugin", "namesPlugin", "React", "Tooltip", "import_react", "ReactDOM", "React", "import_tfjs", "import_react", "import_react", "React", "React", "Tooltip", "import_react", "import_react_grid_system", "React", "import_react", "import_react_grid_system", "import_react_popper_tooltip", "import_colord", "React"]
}
